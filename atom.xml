<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>変わらないで</title>
  
  <subtitle>ダイスキでダイキライ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.garenfeather.cn/"/>
  <updated>2018-03-07T13:44:26.119Z</updated>
  <id>http://blog.garenfeather.cn/</id>
  
  <author>
    <name>GarenFeather</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>my-mermaid-please</title>
    <link href="http://blog.garenfeather.cn/2018/03/07/my-mermaid-please/"/>
    <id>http://blog.garenfeather.cn/2018/03/07/my-mermaid-please/</id>
    <published>2018-03-07T13:43:22.000Z</published>
    <updated>2018-03-07T13:44:26.119Z</updated>
    
    <content type="html"><![CDATA[<div class="mermaid"><svg id="mermaid-svg-c068a488af6f43f8" xmlns="http://www.w3.org/2000/svg" height="100%" viewbox="0 0 340 471.5999984741211" style="max-width:340px;"><style>  .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:"url(#arrowhead)"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100}svg {  color: rgb(0, 0, 0);  font: normal normal 400 normal 16px / normal "Times New Roman";}  </style><g><g class="output"><g class="clusters"/><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M172,56L172,89L172,122" marker-end="url(#arrowhead23)" style="fill:none"/><defs><marker id="arrowhead23" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"/></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M172,158L172,183L172.5,208.50000076293952" marker-end="url(#arrowhead24)" style="fill:none"/><defs><marker id="arrowhead24" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"/></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M138.62653434445983,296.22653358152036L54,362.5999984741211L54,395.5999984741211" marker-end="url(#arrowhead25)" style="fill:none"/><defs><marker id="arrowhead25" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"/></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M172.49999999999997,330.0999992370605L172,362.5999984741211L172,395.5999984741211" marker-end="url(#arrowhead26)" style="fill:none"/><defs><marker id="arrowhead26" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"/></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M204.75625718895262,297.84374357398684L278,362.5999984741211L278,395.5999984741211" marker-end="url(#arrowhead27)" style="fill:none"/><defs><marker id="arrowhead27" viewbox="0 0 10 10" refx="9" refy="5" markerunits="strokeWidth" markerwidth="8" markerheight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"/></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" transform="translate(172,89)" style="opacity: 1;"><g transform="translate(-36,-8)" class="label"><foreignobject width="72" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">Get money</span></div></foreignobject></g></g><g class="edgeLabel" transform="" style="opacity: 1;"><g transform="translate(0,0)" class="label"><foreignobject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"/></div></foreignobject></g></g><g class="edgeLabel" transform="translate(54,362.5999984741211)" style="opacity: 1;"><g transform="translate(-12,-8)" class="label"><foreignobject width="24" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">One</span></div></foreignobject></g></g><g class="edgeLabel" transform="translate(172,362.5999984741211)" style="opacity: 1;"><g transform="translate(-12,-8)" class="label"><foreignobject width="24" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">Two</span></div></foreignobject></g></g><g class="edgeLabel" transform="translate(278,362.5999984741211)" style="opacity: 1;"><g transform="translate(-20,-8)" class="label"><foreignobject width="40" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel">Three</span></div></foreignobject></g></g></g><g class="nodes"><g class="node" id="A" transform="translate(172,38)" style="opacity: 1;"><rect rx="0" ry="0" x="-46" y="-18" width="92" height="36"/><g class="label" transform="translate(0,0)"><g transform="translate(-36,-8)"><foreignobject width="72" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Christmas</div></foreignobject></g></g></g><g class="node" id="B" transform="translate(172,140)" style="opacity: 1;"><rect rx="5" ry="5" x="-54" y="-18" width="108" height="36"/><g class="label" transform="translate(0,0)"><g transform="translate(-44,-8)"><foreignobject width="88" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Go shopping</div></foreignobject></g></g></g><g class="node" id="C" transform="translate(172,268.79999923706055)" style="opacity: 1;"><polygon points="60.800000000000004,0 121.60000000000001,-60.800000000000004 60.800000000000004,-121.60000000000001 0,-60.800000000000004" rx="5" ry="5" transform="translate(-60.800000000000004,60.800000000000004)"/><g class="label" transform="translate(0,0)"><g transform="translate(-48,-8)"><foreignobject width="96" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Let me think</div></foreignobject></g></g></g><g class="node" id="D" transform="translate(54,413.5999984741211)" style="opacity: 1;"><rect rx="0" ry="0" x="-34" y="-18" width="68" height="36"/><g class="label" transform="translate(0,0)"><g transform="translate(-24,-8)"><foreignobject width="48" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Laptop</div></foreignobject></g></g></g><g class="node" id="E" transform="translate(172,413.5999984741211)" style="opacity: 1;"><rect rx="0" ry="0" x="-34" y="-18" width="68" height="36"/><g class="label" transform="translate(0,0)"><g transform="translate(-24,-8)"><foreignobject width="48" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">iPhone</div></foreignobject></g></g></g><g class="node" id="F" transform="translate(278,413.5999984741211)" style="opacity: 1;"><rect rx="0" ry="0" x="-22" y="-18" width="44" height="36"/><g class="label" transform="translate(0,0)"><g transform="translate(-12,-8)"><foreignobject width="24" height="16"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Car</div></foreignobject></g></g></g></g></g></g></svg></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;mermaid&quot;&gt;
&lt;svg id=&quot;mermaid-svg-c068a488af6f43f8&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;100%&quot; viewbox=&quot;0 0 340 471.599998474
      
    
    </summary>
    
      <category term="test" scheme="http://blog.garenfeather.cn/categories/test/"/>
    
    
      <category term="test" scheme="http://blog.garenfeather.cn/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Ghost文档翻译——开发模式启动命令对比</title>
    <link href="http://blog.garenfeather.cn/2018/02/03/Ghost%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E5%AF%B9%E6%AF%94/"/>
    <id>http://blog.garenfeather.cn/2018/02/03/Ghost文档翻译——开发模式启动命令对比/</id>
    <published>2018-02-03T15:35:29.000Z</published>
    <updated>2018-02-03T16:55:43.249Z</updated>
    
    <content type="html"><![CDATA[<hr><p>原文：<a href="https://docs.ghost.org/docs/working-with-ghost" target="_blank" rel="external">working-with-ghost</a><br>翻译部分：</p><ul><li>Day-to-day Development Commands<ul><li>Running Ghost</li></ul></li></ul><h3 id="日常频繁使用的开发命令"><a class="markdownIt-Anchor" href="#日常频繁使用的开发命令"></a> 日常频繁使用的开发命令</h3><h4 id="运行ghost"><a class="markdownIt-Anchor" href="#运行ghost"></a> 运行Ghost</h4><p>Ghost有多种启动方式，每种都各有利弊，这些方式在默认条件下都会从http://localhost:2368./启动Ghost服务</p><a id="more"></a><ul><li><p>grunt dev</p><ul><li>开发模式下最常见的Ghost启动方式</li><li>服务启动时编译构建client文件</li><li>监听server文件，有变化自动重启</li><li>监听client文件，文件变化时敏捷重建，变化包括文件的实时重载</li></ul></li><li><p>grunt dev --server</p><ul><li>启动时不编译client文件，也不监听其变化，其他与上一条命令</li><li>请确保client文件已编译，或者保证其内容为最新（见 <a href="https://docs.ghost.org/docs/working-with-ghost#grunt-build" target="_blank" rel="external">grunt build</a>）</li><li>在确保你不修改client文件的情况下这样有利于最小化启动时间，保存系统资源</li></ul></li><li><p>grunt prod</p><ul><li>生产模式下启动，启动时编译client文件</li><li>既不监听server文件也不监听client文件</li><li>相当于以npm start --production命令启动Ghost</li></ul></li><li><p>node index.js</p><ul><li>单纯的启动Ghost服务器，不构建client，不监听文件变化也不自动重启服务</li><li>当你只想快速启动服务，且不介意手动修改文件要重启服务时适合此命令</li><li><strong>不构建client文件</strong> &amp; 可能会导致后台系统一片空白（见 <a href="https://docs.ghost.org/docs/working-with-ghost#grunt-build" target="_blank" rel="external">grunt build</a>）</li></ul></li></ul><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://docs.ghost.org/docs/working-with-ghost&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;working-with-ghost&lt;/a&gt;&lt;br&gt;
翻译部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Day-to-day Development Commands
&lt;ul&gt;
&lt;li&gt;Running Ghost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;日常频繁使用的开发命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#日常频繁使用的开发命令&quot;&gt;&lt;/a&gt; 日常频繁使用的开发命令&lt;/h3&gt;
&lt;h4 id=&quot;运行ghost&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#运行ghost&quot;&gt;&lt;/a&gt; 运行Ghost&lt;/h4&gt;
&lt;p&gt;Ghost有多种启动方式，每种都各有利弊，这些方式在默认条件下都会从http://localhost:2368./启动Ghost服务&lt;/p&gt;
    
    </summary>
    
      <category term="translation" scheme="http://blog.garenfeather.cn/categories/translation/"/>
    
    
      <category term="ghost" scheme="http://blog.garenfeather.cn/tags/ghost/"/>
    
      <category term="blog" scheme="http://blog.garenfeather.cn/tags/blog/"/>
    
      <category term="grunt" scheme="http://blog.garenfeather.cn/tags/grunt/"/>
    
      <category term="npm" scheme="http://blog.garenfeather.cn/tags/npm/"/>
    
      <category term="node" scheme="http://blog.garenfeather.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://blog.garenfeather.cn/2018/01/29/there-is-just-a-test/"/>
    <id>http://blog.garenfeather.cn/2018/01/29/there-is-just-a-test/</id>
    <published>2018-01-29T09:25:05.000Z</published>
    <updated>2018-01-30T17:41:56.125Z</updated>
    
    <content type="html"><![CDATA[<div class="mermaid"><svg id="mermaid-svg-5e1277ed4785ad8c" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewbox="-50 -10 450 266"><style>  .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:"url(#arrowhead)"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100}svg {  color: rgb(0, 0, 0);  font: normal normal 400 normal 16px / normal "Times New Roman";}  </style><g/><g><line id="actor0" x1="75" y1="5" x2="75" y2="255" class="actor-line" stroke-width="0.5px" stroke="#999"/><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"/><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">Alice</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="255" class="actor-line" stroke-width="0.5px" stroke="#999"/><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"/><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">John</tspan></text></g><defs><marker id="arrowhead" refx="5" refy="2" markerwidth="6" markerheight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"/></marker></defs><defs><marker id="crosshead" markerwidth="15" markerheight="8" orient="auto" refx="16" refy="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"/><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"/></marker></defs><g><text x="175" y="118" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="75" y1="125" x2="275" y2="125" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"/></g><g><text x="175" y="153" class="messageText" style="text-anchor: middle;">Great!</text><line x1="275" y1="160" x2="75" y2="160" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"/></g><g><line x1="65" y1="75" x2="285" y2="75" class="loopLine"/><line x1="285" y1="75" x2="285" y2="170" class="loopLine"/><line x1="65" y1="170" x2="285" y2="170" class="loopLine"/><line x1="65" y1="75" x2="65" y2="170" class="loopLine"/><polygon points="65,75 115,75 115,88 106.6,95 65,95" class="labelBox"/><text x="72.5" y="90" fill="black" class="labelText"><tspan x="72.5" fill="black">loop</tspan></text><text x="175" y="90" fill="black" class="loopText" style="text-anchor: middle;"><tspan x="175" fill="black">[ every day ]</tspan></text></g><g><rect x="0" y="190" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"/><text x="75" y="222.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">Alice</tspan></text></g><g><rect x="200" y="190" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"/><text x="275" y="222.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">John</tspan></text></g></svg></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;mermaid&quot;&gt;
&lt;svg id=&quot;mermaid-svg-5e1277ed4785ad8c&quot; width=&quot;100%&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;100%&quot; style=&quot;max-width:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用heroku实现免费的全平台科学上网</title>
    <link href="http://blog.garenfeather.cn/2018/01/25/%E5%88%A9%E7%94%A8heroku%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E7%9A%84%E5%85%A8%E5%B9%B3%E5%8F%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://blog.garenfeather.cn/2018/01/25/利用heroku实现免费的全平台科学上网/</id>
    <published>2018-01-25T14:03:23.000Z</published>
    <updated>2018-01-25T14:56:34.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-前言"><a class="markdownIt-Anchor" href="#一-前言"></a> 一、前言</h2><h3 id="思路来源"><a class="markdownIt-Anchor" href="#思路来源"></a> 思路来源</h3><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><ul><li>一台连得上Google的服务器（测试用，可选）<ul><li>这里用的是腾讯云买的CentOS 7.2，新加坡节点</li></ul></li><li>一个heroku账号<ul><li>heroku平台注册需要翻墙，但登录和部署均不需要</li><li>账号还有免费app余额</li></ul></li><li>一台<s>便宜且容易搞到手的</s>国内服务器（可选）<ul><li>仅作为中转服务器，不需要多平台共用可以不备</li></ul></li><li>需要梯子服务的平台对应的客户端（Android、Win、Mac、Linux）</li></ul><a id="more"></a><hr><p>内容较复杂，显示不全，完整内容请访问：<a href="https://www.zybuluo.com/RhineGaren/note/1031077" target="_blank" rel="external">https://www.zybuluo.com/RhineGaren/note/1031077</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-前言&quot;&gt;&lt;/a&gt; 一、前言&lt;/h2&gt;
&lt;h3 id=&quot;思路来源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思路来源&quot;&gt;&lt;/a&gt; 思路来源&lt;/h3&gt;
&lt;h3 id=&quot;准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备&quot;&gt;&lt;/a&gt; 准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一台连得上Google的服务器（测试用，可选）
&lt;ul&gt;
&lt;li&gt;这里用的是腾讯云买的CentOS 7.2，新加坡节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个heroku账号
&lt;ul&gt;
&lt;li&gt;heroku平台注册需要翻墙，但登录和部署均不需要&lt;/li&gt;
&lt;li&gt;账号还有免费app余额&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一台&lt;s&gt;便宜且容易搞到手的&lt;/s&gt;国内服务器（可选）
&lt;ul&gt;
&lt;li&gt;仅作为中转服务器，不需要多平台共用可以不备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要梯子服务的平台对应的客户端（Android、Win、Mac、Linux）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="coding" scheme="http://blog.garenfeather.cn/categories/coding/"/>
    
    
      <category term="network" scheme="http://blog.garenfeather.cn/tags/network/"/>
    
      <category term="heroku" scheme="http://blog.garenfeather.cn/tags/heroku/"/>
    
      <category term="wall" scheme="http://blog.garenfeather.cn/tags/wall/"/>
    
  </entry>
  
  <entry>
    <title>Docker添加iptables防火墙规则构建容器间通信</title>
    <link href="http://blog.garenfeather.cn/2018/01/15/Docker%E6%B7%BB%E5%8A%A0iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99%E6%9E%84%E5%BB%BA%E5%AE%B9%E5%99%A8%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://blog.garenfeather.cn/2018/01/15/Docker添加iptables防火墙规则构建容器间通信/</id>
    <published>2018-01-14T21:43:04.000Z</published>
    <updated>2018-01-16T14:37:47.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-坑从何来"><a class="markdownIt-Anchor" href="#一-坑从何来"></a> 一、坑从何来</h2><p>最近正好看到解析Docker单主机网络的部分，提到通过link链接容器，于是深入思考了下link的机制，首先如果为容器添加一条链接会发生以下几件事：</p><ul><li>描述目标容器的环境变量会被创建</li><li>链接的别名和对应目标容器的ip地址会被添加到DNS覆盖列表中</li><li>如果跨容器通信被禁止，Docker会添加特定的防火墙规则来允许被链接的容器间的通信。</li></ul><p>重点在于第三点，这里Docker添加的防火墙规则是允许两个容器通信到什么地步呢，大概有以下三种猜想：</p><a id="more"></a><ol><li>两个容器间任意端口自由通信，应该不太可能，达到这种地步接近Joined容器共用同一个网络栈的级别了</li><li>容器任意端口都能连上目标容器EXPOSE的端口</li><li>容器只有指定的的进程（如pid唯一）、指定的端口号能够连上目标容器EXPOSE的端口，至于这个指定的进程和端口号猜测是在构建的时候指定好并添加到配置中去的？</li></ol><p>最初的猜想是3，因为如果是2的话，容器被非法入侵岂不是可以新开个进程随意连上数据库往外倒数据？（<em>后来仔细想想，容器都被入侵了，跟权限被提到root了有啥区别……当然是为所欲为啊，不过当时没想清楚就是了</em>）这明显不安全。</p><p>这里验证最直观可靠的方式还是看iptables的路由规则，开始实验。</p><hr><h2 id="二-在踩坑的边缘试探"><a class="markdownIt-Anchor" href="#二-在踩坑的边缘试探"></a> 二、在踩坑的边缘试探</h2><h4 id="1实验环境"><a class="markdownIt-Anchor" href="#1实验环境"></a> 1.实验环境</h4><ul><li>Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-63-generic x86_64)</li><li>Docker version 17.05.0-ce, build 89658be</li></ul><hr><h4 id="2iptables设置"><a class="markdownIt-Anchor" href="#2iptables设置"></a> 2.iptables设置</h4><p>查看当前iptables设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -nL</div></pre></td></tr></table></figure><p>以防万一大家可以先清洗一遍iptables，有配置的同学记得提前<strong>备份</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -F</div></pre></td></tr></table></figure><p>清洗后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Chain INPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line">Chain FORWARD (policy DROP)</div><div class="line">target     prot opt source               destination</div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line">Chain DOCKER (0 references)</div><div class="line">target     prot opt source               destination</div><div class="line">Chain DOCKER-ISOLATION (0 references)</div><div class="line">target     prot opt source               destination</div></pre></td></tr></table></figure><hr><h4 id="3icc-iptables选项与etcdefaultdocker"><a class="markdownIt-Anchor" href="#3icc-iptables选项与etcdefaultdocker"></a> 3.icc、iptables选项与/etc/default/docker</h4><p>icc是跨容器通信开关，iptables则是Docker是否应用防火墙规则的开关，于是修改/etc/default/docker文件，禁止跨容器通信，要求Docker使用iptables规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=&quot;--icc=false --iptables=true&quot;</div></pre></td></tr></table></figure><p>同时去掉注释，并重启docker服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service docker restart</div></pre></td></tr></table></figure><p>再次查看当前iptables配置，可以看到docker和docker-isolation都被加入到了chain-forward项中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Chain FORWARD (policy DROP)</div><div class="line">target     prot opt source               destination </div><div class="line">DOCKER-ISOLATION  all  --  0.0.0.0/0            0.0.0.0/0 </div><div class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</div><div class="line">DOCKER     all  --  0.0.0.0/0            0.0.0.0/0 </div><div class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0 </div><div class="line">DROP       all  --  0.0.0.0/0            0.0.0.0/0 </div><div class="line">Chain DOCKER (1 references)</div><div class="line">target     prot opt source               destination         </div><div class="line">ACCEPT     tcp  --  172.17.0.3           172.17.0.2           tcp dpt:3306</div><div class="line">ACCEPT     tcp  --  172.17.0.2           172.17.0.3           tcp spt:3306</div><div class="line">Chain DOCKER-ISOLATION (1 references)</div><div class="line">target     prot opt source               destination </div><div class="line">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</div></pre></td></tr></table></figure><p>此处用本机现有的mysql和redis做实验，redis依赖mysql（mysql密码请自行根据自己的配置修改）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run --rm --name  mysql -e 3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run --rm --name redis --link mysql:mysql -d redis</div></pre></td></tr></table></figure><p>操作完docker ps可以看到两个容器正常运行，但并没有看到iptables有新添加规则。</p><hr><h4 id="4docker-network"><a class="markdownIt-Anchor" href="#4docker-network"></a> 4.docker network</h4><p>之前的项目没有涉及到多网络配置，因此对network一无所知，加上无脑瞎找资料没思考清楚，误以为是两个容器不在一个网络内，于是查看默认bridge网络配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker network inspect bridge</div></pre></td></tr></table></figure><p>部分相关配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;Name&quot;: &quot;bridge&quot;,</div><div class="line">  &quot;Id&quot;: &quot;d14d164b2dbc43b33eb298d79e5928fda258129a02f6c2a7c310633a718d356c&quot;,</div><div class="line">  &quot;Created&quot;: &quot;2018-01-15T03:53:42.133885625+08:00&quot;,</div><div class="line">  &quot;Scope&quot;: &quot;local&quot;,</div><div class="line">  &quot;Driver&quot;: &quot;bridge&quot;,</div><div class="line">  &quot;EnableIPv6&quot;: false,</div><div class="line">  &quot;IPAM&quot;: &#123;</div><div class="line">    &quot;Driver&quot;: &quot;default&quot;,</div><div class="line">    &quot;Options&quot;: null,</div><div class="line">    &quot;Config&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</div><div class="line">        &quot;Gateway&quot;: &quot;172.17.0.1&quot;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &quot;Internal&quot;: false,</div><div class="line">  &quot;Attachable&quot;: false,</div><div class="line">  &quot;Ingress&quot;: false,</div><div class="line">  &quot;Containers&quot;: &#123;</div><div class="line">    &quot;5b81e33ddd5e7e79e6c315bd3889812362d19732e0ce9a0486edc98a26c59e77&quot;: &#123;</div><div class="line">      &quot;Name&quot;: &quot;redis&quot;,</div><div class="line">      &quot;EndpointID&quot;: &quot;df2e9dda0de35c4934a50d33bd23cb9d27301cac3882880ba58acf82713956f4&quot;,</div><div class="line">      &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</div><div class="line">      &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</div><div class="line">      &quot;IPv6Address&quot;: &quot;&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;fada6a036ecba16bc1c08ec5b8fced59b51144a949d7c1051b78e88d7a4bb35f&quot;: &#123;</div><div class="line">      &quot;Name&quot;: &quot;mysql&quot;,</div><div class="line">      &quot;EndpointID&quot;: &quot;38a5036088b19daa08e212d947b44f3a94e823d9a2cd060d0fbfc19680591abf&quot;,</div><div class="line">      &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</div><div class="line">      &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</div><div class="line">      &quot;IPv6Address&quot;: &quot;&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;Options&quot;: &#123;</div><div class="line">    &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</div><div class="line">    &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</div><div class="line">    &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</div><div class="line">    &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</div><div class="line">    &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</div><div class="line">    &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;Labels&quot;: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>发现两个容器都在默认网络里。顺便这里有个很迷的地方就是Options里的true和false都是字符串类型，但外面的却不是，后面会提到。观察配置发现icc选项还是true，说明刚才修改的/etc/default/docker文件很可能没起作用。此处有两个选择：</p><ul><li>新建一个bridge网络，icc设为false</li><li>继续设法修改docker daemon启动选项</li></ul><p>其实并没有选择，因为就参数来看只能设置icc，而iptables使用与否必须是docker daemon启动时设置好的。直接百度到的资料杂乱无章，对错参半，于是还是根据官网操作：<br><img src="https://s1.ax2x.com/2018/01/15/MBIxe.jpg" alt="图1 docs.docker.com配置说明"><br>新建daemon.json：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/docker/daemon.json</div></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;iptables&quot;: &quot;true&quot;,</div><div class="line">  &quot;icc&quot;: &quot;false&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>并重启dockerd服务，发现会重启失败，显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unable to configure the Docker daemon with file /etc/docker/daemon.json: json: cannot unmarshal string into Go value of type bool</div></pre></td></tr></table></figure><p>这就是刚才提到的很迷的地方，欺负我们不懂go语言系列，参数改为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;iptables&quot;: true,</div><div class="line">  &quot;icc&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>保存后再重启docker daemon，再次查看bridge网络，options选项中的com.docker.network.bridge.enable_icc应该为false了，说明配置生效了，此时再按上面步骤启动容器link，可以看到iptables多了两条规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Chain DOCKER (1 references)</div><div class="line">target     prot opt source               destination         </div><div class="line">ACCEPT     tcp  --  172.17.0.3           172.17.0.2           tcp dpt:mysql</div><div class="line">ACCEPT     tcp  --  172.17.0.2           172.17.0.3           tcp spt:mysql</div></pre></td></tr></table></figure><p>操作成功，可以发现两个容器之间互联的是通过forward链的转发规则，具体规则可阅读iptables forward详解。<br>外面替换一下两个容器的位置，也可以看到同样结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker run --rm --name redis -e 6379 -d redis</div><div class="line">$ docker run --rm --name  mysql --link redis:redis -e MYSQL_ROOT_PASSWORD=123456 -d mysql</div></pre></td></tr></table></figure><p>端口变成了redis的6379：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Chain DOCKER (1 references)</div><div class="line">target     prot opt source               destination         </div><div class="line">ACCEPT     tcp  --  172.17.0.3           172.17.0.2           tcp dpt:6379</div><div class="line">ACCEPT     tcp  --  172.17.0.2           172.17.0.3           tcp spt:6379</div></pre></td></tr></table></figure><hr><h4 id="5结束"><a class="markdownIt-Anchor" href="#5结束"></a> 5.结束</h4><p>验证过程中很多地方没想清楚胡乱操作一通，把原本简单的问题都搞复杂了，动手前深思熟虑还是很重要的啊（俗话说得好，真正写代码的时间能有20%不错了）。</p><hr><h2 id="二-后来"><a class="markdownIt-Anchor" href="#二-后来"></a> 二、后来</h2><h4 id="1仔细想想"><a class="markdownIt-Anchor" href="#1仔细想想"></a> 1.仔细想想</h4><ul><li><p>其实当时还想顺着猜测3的思路深入思考过如果容器被非法入侵，直接攻击代码搞挂了原本的进程，用原本与目标容器3306连接的端口构建数据库的连接该怎么办……那当然是没办法啦啊哈哈哈，你说你家金库的钥匙密码人家都拿到了你的黄金怎么办，那当然是没办法的，重点应该在怎么防止密码和钥匙失窃上吧hhhhh。</p></li><li><p>而且退一步想，指定能与目标容器3306连接的端口可以办得到，但是绑定到进程上是没有实现的可能的，作为进程标识的pid是会被复用的，重启后pid会变，不可能每次重启进程都重新设定绑定关系，而且也没有设定的基础。</p></li><li><p>网络基础还是不扎实，很多东西没真正理解。</p></li></ul><h4 id="2论如何查资料"><a class="markdownIt-Anchor" href="#2论如何查资料"></a> 2.论如何查资料</h4><ul><li>珍爱生命，少查csdn，多看官方文档，过脑思考比无脑开车撞墙要好</li><li>努力改掉下意识避开英文的习惯</li><li>写操作指南不指明各种相关版本号的都是***耍流氓***</li><li><strong>基础不牢，地动山摇，我还是太天真了.jpg</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-坑从何来&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-坑从何来&quot;&gt;&lt;/a&gt; 一、坑从何来&lt;/h2&gt;
&lt;p&gt;最近正好看到解析Docker单主机网络的部分，提到通过link链接容器，于是深入思考了下link的机制，首先如果为容器添加一条链接会发生以下几件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述目标容器的环境变量会被创建&lt;/li&gt;
&lt;li&gt;链接的别名和对应目标容器的ip地址会被添加到DNS覆盖列表中&lt;/li&gt;
&lt;li&gt;如果跨容器通信被禁止，Docker会添加特定的防火墙规则来允许被链接的容器间的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点在于第三点，这里Docker添加的防火墙规则是允许两个容器通信到什么地步呢，大概有以下三种猜想：&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://blog.garenfeather.cn/categories/coding/"/>
    
    
      <category term="Docker" scheme="http://blog.garenfeather.cn/tags/Docker/"/>
    
      <category term="network" scheme="http://blog.garenfeather.cn/tags/network/"/>
    
      <category term="iptables" scheme="http://blog.garenfeather.cn/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁机制及几种方案对比</title>
    <link href="http://blog.garenfeather.cn/2017/11/24/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/"/>
    <id>http://blog.garenfeather.cn/2017/11/24/分布式锁机制及几种方案对比/</id>
    <published>2017-11-24T05:51:54.000Z</published>
    <updated>2018-02-03T16:56:10.956Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文：<a href="http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;mid=2247484071&amp;idx=1&amp;sn=f2af23340ab34052109065dfc8163f35&amp;chksm=e9bf5039dec8d92fc89155b2d742d11e75231daa6c390378940b34263d839b009a1def8bcf35&amp;mpshare=1&amp;scene=23&amp;srcid=0203YH5S7CyrwQE6uMkLZqOz#rd" target="_blank" rel="external">分布式锁那些事</a></li><li>本文是在原文基础上用自己的语言试着更简洁的转述一遍，类似提纲，加入自己的小理解，和少部分扩展思考，内容基本为原文</li></ul><hr><h2 id="分布式锁机制及几种方案对比"><a class="markdownIt-Anchor" href="#分布式锁机制及几种方案对比"></a> 分布式锁机制及几种方案对比</h2><a id="more"></a><h3 id="为什么需要分布式锁"><a class="markdownIt-Anchor" href="#为什么需要分布式锁"></a> 为什么需要分布式锁</h3><ul><li>保证同一方法同一时间只有一个线程执行</li><li>单机性能有限，服务由单体部署拆分成分布式部署</li><li>需要跨进程，跨机，跨数据中心一致性方案(单进程内各语言或自身有锁方案，或配合架构有特定的组件集成)</li></ul><h3 id="分布式锁要求"><a class="markdownIt-Anchor" href="#分布式锁要求"></a> 分布式锁要求</h3><ul><li>同一时刻一个方法只能有一个进程的一个线程执行</li><li>高可用</li><li>高性能</li><li>锁失效方案</li><li>支持阻塞锁，获取锁失败可以继续尝试获取</li><li>支持非阻塞锁，获取失败立刻返回</li></ul><h3 id="分布式锁的三种方案分析"><a class="markdownIt-Anchor" href="#分布式锁的三种方案分析"></a> 分布式锁的三种方案分析</h3><h4 id="数据库方案"><a class="markdownIt-Anchor" href="#数据库方案"></a> 数据库方案</h4><ul><li>操作<ul><li>数据库建表，在<strong>方法名上创建唯一索引</strong></li><li>在表中插入方法名，执行者等的一条数据，插入成功获取锁</li></ul></li><li>优势<ul><li>借助数据库，结构简单</li></ul></li><li>不足<ul><li>受限数据库性能(可能要求多机部署，主备复制，数据同步等)</li><li>没有锁失效方案</li><li>不可重入</li><li>没有阻塞锁方案，需要自行循环</li></ul></li></ul><h4 id="redis方案"><a class="markdownIt-Anchor" href="#redis方案"></a> Redis方案</h4><ul><li>操作(2.6.12版之前)<ul><li>setnx设置key-value</li><li>expire设置过期时间</li><li>del释放</li></ul></li><li>问题及对应解决方案<ul><li><strong>每一步的操作都要保证原子性</strong>，set完没来得及设expire会导致死锁(2.6.12版实现了将两个操作合并原子化操作)</li><li>分布式环境下，A获取锁后阻塞，锁过期被B获取，A恢复后执行完错误释放了此时属于B的锁(经典CAS算法解决被误释放问题，但原本线程操作未完就失去锁的问题并没解决)</li><li>高可用要求主从复制机制，而主从复制多为异步，会出现数据不一致(不主从复制，用<strong>RedLock</strong>算法，该算法的成熟开源实现即Redisson，<strong>此处并不明白该算法如何解决主从复制的问题</strong>)</li></ul></li><li>整体优势：借助Redis，实现方便</li><li>问题：超时作为锁失效机制不可靠，若处理时间过长会在完成前失去锁</li></ul><h4 id="zookeeper方案"><a class="markdownIt-Anchor" href="#zookeeper方案"></a> Zookeeper方案</h4><ul><li>结构：内部分层文件系统目录树</li><li>操作<ul><li>(原文有不清晰之处，待日后补充)</li></ul></li><li>优点<ul><li>高可用</li><li>可重入</li><li>阻塞锁</li><li>解决锁失效</li></ul></li><li>缺点：频繁插入删除性能会比Redis差一些</li></ul><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><h4 id="redlock算法"><a class="markdownIt-Anchor" href="#redlock算法"></a> Redlock算法</h4><ul><li>大致思想为布置多个Redis Master节点，挨个申请锁，获取多数则成功，少数则在所有节点上解锁？</li></ul><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;原文：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjUxNTY5Nw==&amp;amp;mid=2247484071&amp;amp;idx=1&amp;amp;sn=f2af23340ab34052109065dfc8163f35&amp;amp;chksm=e9bf5039dec8d92fc89155b2d742d11e75231daa6c390378940b34263d839b009a1def8bcf35&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0203YH5S7CyrwQE6uMkLZqOz#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分布式锁那些事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文是在原文基础上用自己的语言试着更简洁的转述一遍，类似提纲，加入自己的小理解，和少部分扩展思考，内容基本为原文&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;分布式锁机制及几种方案对比&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式锁机制及几种方案对比&quot;&gt;&lt;/a&gt; 分布式锁机制及几种方案对比&lt;/h2&gt;
    
    </summary>
    
      <category term="coding" scheme="http://blog.garenfeather.cn/categories/coding/"/>
    
    
      <category term="distributed" scheme="http://blog.garenfeather.cn/tags/distributed/"/>
    
      <category term="lock" scheme="http://blog.garenfeather.cn/tags/lock/"/>
    
      <category term="redis" scheme="http://blog.garenfeather.cn/tags/redis/"/>
    
      <category term="zookeeper" scheme="http://blog.garenfeather.cn/tags/zookeeper/"/>
    
      <category term="database" scheme="http://blog.garenfeather.cn/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【Philosophical Dilemmas】上帝、永生与信仰</title>
    <link href="http://blog.garenfeather.cn/2017/10/24/%E3%80%90Philosophical-Dilemmas%E3%80%91%E4%B8%8A%E5%B8%9D%E3%80%81%E6%B0%B8%E7%94%9F%E4%B8%8E%E4%BF%A1%E4%BB%B0/"/>
    <id>http://blog.garenfeather.cn/2017/10/24/【Philosophical-Dilemmas】上帝、永生与信仰/</id>
    <published>2017-10-24T12:24:44.000Z</published>
    <updated>2018-01-31T12:28:43.712Z</updated>
    
    <content type="html"><![CDATA[<p>前言：首先，这是《Philosophical Dilemmas》第三版中译本《没有标准答案的哲学问题》的读书笔记~~（<strong>阅读理解</strong>/课后习题/这次语文月考<strong>又挂</strong>了哎）~~，全书共五章，每章约7个问题，回答包含两到三个立场，都是根本性的问题，难以回答，但还是试着做出选择并给出自己的理由，必然存在前后矛盾，尽力逻辑自洽。全部大概分成五次发，欢迎讨论，求指正。</p><hr><h2 id="一-上帝-永生与信仰"><a class="markdownIt-Anchor" href="#一-上帝-永生与信仰"></a> 一、上帝、永生与信仰</h2><h3 id="1-上帝存在吗"><a class="markdownIt-Anchor" href="#1-上帝存在吗"></a> 1 上帝存在吗</h3><a id="more"></a><h4 id="是因果论有神论者"><a class="markdownIt-Anchor" href="#是因果论有神论者"></a> <strong>是：因果论有神论者</strong></h4><ul><li><p>否定特性与否定特征近义，描述事物具有否定特性/征无法告诉我们事物具体究竟是如何的，只能排除事物具有某种特征的可能性，无法定义事物所需要被描述的特性。(例：不是树的植物)</p></li><li><p>不能，可以，因为思考不一定要有结果，人的想象能力也会变化。</p></li><li><p>不可以，因为想象和思考都是个人的行为，受限于个人的认知能力，若以现阶段社会主流的基本定义来说是不存在的(90°直角与圆边冲突)</p></li><li><p>不会，会</p></li><li><p>不能，事实一和事实二冲突</p></li></ul><h4 id="是智慧有神论者"><a class="markdownIt-Anchor" href="#是智慧有神论者"></a> <strong>是：智慧有神论者</strong></h4><ul><li>因为机器的各个部分一定是通过某种特定方式有计划地组合在一起，而不是随意地拼在一起。如果是机器，一定是由一个智能的设计师创造出来的，这个英明、具有力量的设计师只能是上帝。</li></ul><p>机器不会偶然出现—&gt;机器有设计师</p><p>世界秩序井然—&gt;世界不是垃圾堆，更像一台机器，且比机器更复杂精确—&gt;世界不会偶然自己诞生—世界有设计师—设计师比我们更有能耐是上帝—上帝存在</p><ul><li><p>不可以，因为他首先证明了世界具有机器的基本特征，证明了有&quot;设计师&quot;的存在，间接证明的是设计师比我们更强大更有智慧，即上帝。</p></li><li><p>世界与机器一样存在一定的因果关系。</p></li><li><p>因为没有一台机器是偶然产生的，如果世界是偶然产生的，是&quot;进化&quot;而来的，那我们会看到机器可以通过&quot;进化&quot;而自行长大。而且偶然结合的过程无法解释人类这样复杂的生物是如何形成的。</p></li><li><p>都会的</p></li></ul><h4 id="不无神论者"><a class="markdownIt-Anchor" href="#不无神论者"></a> <strong>不：无神论者</strong></h4><ul><li><p>原始部落到古希腊的进化</p><ul><li><p>神灵都退到奥林匹斯处，而且数量大大减少</p></li><li><p>神的概念出现在神教中，他指导但不甘于历史，上帝减少以凡人形象式出现，人们需要劳驾上帝解释的东西变少，宗教信仰的根基动摇</p></li></ul></li><li><p>是的，我认为</p></li><li><p>上帝概念变化方式</p><ul><li><p>上帝的概念离人物事务更远，很少参与和干预人间的事务</p></li><li><p>不再相信人类的智慧是上帝本性的副本，不相信上帝会展现出嫉妒、愤怒和同情的特点</p></li></ul></li><li><p>对人自己的形象从相信是上帝设计的人体和人脑转变为相信自然选择过程，就像其他物种一样没有人能给人类描绘一个原始的蓝图。对上帝的概念脱离人类的形象，即不再相信人类的智慧是上帝的副本</p></li><li><p>相信上帝同时相信与人类没有相同/把星系或热能称为上帝</p><ul><li><p>我认为不可能，因为上帝的形象本就是基于比人类更全能的高等形象，即其本质上还是脱胎于人类，无法与人类的形象完全脱离关系</p></li><li><p>我认为不能，星系或热能都是物理学范畴的概念，上帝更多的是宗教概念，难以混为一谈</p></li></ul></li><li><p>可能，因为本就没有理由相信上帝本善</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择：无神论者</div></pre></td></tr></table></figure><hr><h3 id="2-上帝像人一样吗"><a class="markdownIt-Anchor" href="#2-上帝像人一样吗"></a> 2 上帝像人一样吗</h3><h4 id="不抽象主义者"><a class="markdownIt-Anchor" href="#不抽象主义者"></a> <strong>不：抽象主义者</strong></h4><ul><li><p>会。他是一个智慧慈祥的老人，白须长而密，沐浴在耀眼的白光中，手握权杖，身披锦袍。</p></li><li><p>不认为，我认为这取决于孩子个人的成长环境与成长经历。</p></li><li><p>与单纯的物理意义不同，上帝象征着一种形象，在每个人想象中不同的形象，这些形象有一些共通的特征，传达一些共通的精神。上帝这个概念更倾向于一个精神概念。</p></li><li><p>不能。如果是发自本心的爱，其指向本身并没有对错，而道德更多是人为的标准，本质上与爱并无直接关联。若男人真心爱女同事也当面对本心(与妻子的契约解除与否，忠诚背叛则是另一回事)，女人若真爱她的工作追求目标也无可厚非，爱指导他们的追逐。</p></li><li><p>一般来说需要研究构造，即事物AB组成成分是否相同，组成结构是否相同。外在需要证明闪电与电具有相同的特征、性质，内在证明两者由同样物质构成。</p></li><li><p>上帝未必与我们同在，针对文中提到的，母亲可能抛弃孩子，厨房里的工作者可能因为恶念下毒，病房中的护士也可能毫无耐心。被抛弃的孩子、被毒死的客人、得不到护理的患者有理由相信上帝和爱都不与他们同在。</p></li></ul><p>人们实现了愿望会相信上帝能听到他们的祈祷，但更多的人更多的愿望不会被实现。</p><h4 id="是人格主义者"><a class="markdownIt-Anchor" href="#是人格主义者"></a> <strong>是：人格主义者</strong></h4><ul><li><p>一种生理假设：人们努力实现自我意识，把自己投射到环境之中然后读到投射结果，以此来认识自我。</p></li><li><p>因为他认为宗教会阻止人们充分挖掘自己的潜能。</p></li><li><p>因为他们希望上帝存在。</p></li><li><p><s>(对多神教缺乏了解只好口胡了)</s> 粗略的来看可能适合，以北欧神话体系为例，其本身还是父权体系，而此处提到的佛洛依德理论核心是父亲形象，因此也许合适？ <s>鬼知道那是什么东西</s></p></li><li><p>因为上帝存在与否与普遍认同的上帝形象之间并没有必然联系，有可能人类确实将自身形象投射到上帝形象上而存在的上帝确实也是人的形象，投射论本身不涉及客观的论据，本身并不证明什么。</p></li><li><p>不知道。</p></li><li><p>本文认为相信事物的存在只是因为只是因为希望它存在是非理性的。并不认为是非理性的，人格主义者认为无法充分证明信奉上帝是非理性的。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择：人格主义者</div></pre></td></tr></table></figure><hr><h3 id="3-上帝允许无辜的苦难吗"><a class="markdownIt-Anchor" href="#3-上帝允许无辜的苦难吗"></a> 3 上帝允许无辜的苦难吗</h3><h4 id="反对者"><a class="markdownIt-Anchor" href="#反对者"></a> <strong>反对者</strong></h4><ul><li><p>人为恶与自然恶</p></li><li><p>上帝想消除恶也能消除恶</p></li><li><p>两个对立面是：①上帝是全能而仁慈的，他爱它所创造的一切，如果这样，怎么会发生这么多恶?②不能消除恶的存在不是全能的，不想消除恶的存在不是仁慈的，因此就不是上帝了</p></li><li><p>因为综合上帝的两个重要特征，如果上帝存在必然不会有恶发生，而实际上因为有恶的发生，就没有一种仁慈而全能的事物。</p></li><li><p>首先除了人类造的恶外还有其他的恶不归人类负责。例如地震带来巨大灾难，但与自由意志无关；其次如果是人类恶，上帝如果全知，在创造时就能预料到给人类自由，人类会在世界上作恶，但它还是创造了我们，上帝该为这后果负责。</p></li><li><p>他会要人们为了天堂中的幸福忍辱负重，承受现实生活的苦难。是的，因为不然无法理解承受恶的我们便无法信仰上帝。</p></li></ul><h4 id="调和者"><a class="markdownIt-Anchor" href="#调和者"></a> <strong>调和者</strong></h4><ul><li><p>这个世界没被消除的苦难与上帝全知仁慈形象之间的冲突</p></li><li><p>本文认为人需要经历长时间的艰苦磨难才能形成真正的品德，品德是人生经历的产物。个人认为此文并没有正面解答这个问题</p></li><li><p>这个错误是他们抱怨这个世界的痛苦和苦难，似乎他们能把这些苦难都消除掉，他们只看到了事情的表面，没看出痛苦是生活必不可少的一部分</p></li><li><p>不赞同，个人而言更愿意生活在现在这个世界，可是每个人最适合的世界并不一样。不是所有人都该面对所谓苦难的机会，而且苦难并不是一种给所有人机会的东西，天灾一类的苦难比起给人机会更多的是直接剥夺了人的生命或选择的机会，剥夺了一些人的创意和力量。林肯的人性散发着光辉，但被疾病夺去性命的是他的小儿子而不是他，战争死去的是他的国民也不是他。</p></li><li><p>是指苦难即人性的考验，考验人的品德、对上帝的忠诚一类的存在。有区别，考验说假定上帝多疑残忍，假定接受考验前人就已经有了品德这一特性，调和者说否定两者；调和者还认为痛苦只是一个机会，一种可能性，而非具有测验性质的、更多是被刻意制造的考验这种存在。</p></li><li><p>不认为，不相容。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择：反对者</div></pre></td></tr></table></figure><hr><h3 id="4-灵魂是不朽的吗"><a class="markdownIt-Anchor" href="#4-灵魂是不朽的吗"></a> 4 灵魂是不朽的吗</h3><h4 id="不死亡论者"><a class="markdownIt-Anchor" href="#不死亡论者"></a> <strong>不：死亡论者</strong></h4><ul><li><p>因为他们认为可以想象死后这个世界的样子，想象人群、季节、变化、日常活动，在脑海里描绘这些情景就像看着它们发生。然而事实是人没有肉体就没有五官、感觉，从想象上看与世界不会有任何互动</p></li><li><p>因为他的肉体被埋葬，而没有肉体也就没有感觉，无法与世界产生互动</p></li><li><p>同意，基于世上大多数人都认同自己肉体性别这一认知基础。不同性别社会对他们有不同的要求和期待，因此进一步影响个性的形成。</p></li><li><p>死亡论者认为人们能够想象没有肉体的存在，进而想象与自己无关的继续运转的世界，即你受限于肉体，与世界间无互动，而无互动即没有真正待在这个世界里</p></li><li><p>不能证明，薛定谔的猫定律，我想象不出两种状态共存于一个盒子且在盒子打开的那一瞬间决定最终状态</p></li><li><p>没有</p></li></ul><h4 id="是存活论者"><a class="markdownIt-Anchor" href="#是存活论者"></a> <strong>是：存活论者</strong></h4><ul><li><p>他们的一依据是历史上有很多人声称他们看到钢丝去的鬼影或曾与死人堆话等，我认为基本理性，因为若是真的则是基于证据报告的看法，当然前提是报告足够可靠</p></li><li><p>全面彻底的检测他们的生平，排除一切预先了解或推断出结果的可能性，确定相关情报只有死人才掌握</p></li><li><p>因为无法解释病人为什么知道其他房间发生的事情</p></li><li><p>我认为理论上第二种最可信（在极其彻底的排查手段被应用的前提条件下）</p></li><li><p>按照此文观点，反对&quot;死后生命说&quot;的证据是肉体影响大脑的，而有证据表明大脑也可以影响肉体，两者相互中和</p></li><li><p>不适用，因为反对观点证据有效的基础是该观点认为生命基于肉体，但支持&quot;死后生命说&quot;的观点并没有证明死后生命的基础与大脑有关，而且按照常规思路来看，大脑也可以是肉体的一部分，中和没有实际意义。</p></li></ul><p><em>小想法A：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">标题与论证内容有一定的差异？（如死后生命可以存在一段时间后再消逝？） ，灵魂存在但未必不朽等。</div></pre></td></tr></table></figure><p><em>小想法B：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这两篇的论证都有局限，存活论说服力不大，死亡论过于倾向于主观认知（即无法想象/未被认知的事物不存在）</div></pre></td></tr></table></figure><p><em>小想法C：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">还有一个硬伤是先入为主的认为死后生命形式与生前别无二致，从而才得出结论认为无法与世界互动，但事实上若有死后生命，其形式应该是未知的（存活论中提到这点），获取信息的手段也是未知的</div></pre></td></tr></table></figure><p>小想法D：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例如以死后人以某种类似电磁波集合体的形式存在？电磁信号理论上能携带事务的所有信息（基于01信号的观点），但进一步猜测这种存在很快会消散，因此灵魂未必不朽</div></pre></td></tr></table></figure><hr><h3 id="5-信仰是一个答案吗"><a class="markdownIt-Anchor" href="#5-信仰是一个答案吗"></a> 5 信仰是一个答案吗</h3><h4 id="是宗教信仰者"><a class="markdownIt-Anchor" href="#是宗教信仰者"></a> <strong>是：宗教信仰者</strong></h4><ul><li><p>我们对世界和人类的了解甚少，免疫系统远比我们意识到的要复杂、微妙</p></li><li><p>用不同的方式思考死亡，科学研究后发现&quot;没有人知道为什么会发生死亡&quot;，必须面对肉体崩溃的局限，无法理解强烈求生意志的含义等。这使他变得谦卑，发现更多的局限性</p></li><li><p>死亡、起源、社会、感觉相关的终极问题。我不认为，我认为有人能理解而不为我们所知，或人类只是还没到那个阶段。</p></li><li><p>不同意</p></li><li><p>作者本身直言不需要论据和论证，只是因为自己想相信，即不接受反驳的意思，某种程度上是对的，对个体而言信仰确实可以不接受反驳，谈不上对错，但无法使他人信服，而如果试图讨论一些&quot;共同&quot;的东西，使人信服是有必要的</p></li><li><p>他不认为，他只是寻求一个能解答所有这些问题的回答，这个信念为所有其他问题提供了答案</p></li><li><p>不应该。也不应该，治疗方式无论如何应当有一定的理论实践基础</p></li></ul><h4 id="不宗教质疑者"><a class="markdownIt-Anchor" href="#不宗教质疑者"></a> <strong>不：宗教质疑者</strong></h4><ul><li><p>信仰可以是一种相对可能性的合理推论，如果有事实和客观依据。说某种信仰有证据就等于是说有些公认的事实可以让这种信仰更为可信，比如服用某种药物的十个病人中有九人的病治愈了，而没服药的没治愈，就表明这种药可能对类似的病更容易痊愈，这是证据。</p></li><li><p>一是因为被权威人士要求去信奉的，二是因为这会让人们感觉好受一些。</p></li><li><p>人们会永远学不会独立思考，而习惯了相信权威这种思维方式后人们也会在其他领域使用这种思维方式。</p></li><li><p>我认为不会，首先我没有信奉的宗教，而且相信权威人物也是建立在自行思考和对权威人物的观点思考后的结果，错了也只会指责相信错误的自己而非错误的权威。不能，科学权威的观点也需要经过我们个人的思考、逻辑判断和论证。</p></li><li><p>在关于种族和性别的优势上研究结果不明确时，我们会因为某个信念能让我们感到非常舒服而去相信他，这偏见本身就是严重的歧视。</p></li><li><p>主要分歧在持有信仰的理由上，信仰者认为不需要证据，而质疑者认为这样一厢情愿的依据信仰形式不对，应当有证据支撑。质疑者应当不会。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择：宗教质疑者</div></pre></td></tr></table></figure><hr><h3 id="6-想要过有意义的生活必须信仰上帝吗"><a class="markdownIt-Anchor" href="#6-想要过有意义的生活必须信仰上帝吗"></a> 6 想要过有意义的生活，必须信仰上帝吗？</h3><h4 id="意义型有神论者生活的意义是服从上帝"><a class="markdownIt-Anchor" href="#意义型有神论者生活的意义是服从上帝"></a> <strong>意义型有神论者(生活的意义是服从上帝)</strong></h4><ul><li><p>一个人不能自己决定某些价值让人生有意义，如同一个人不能让一个词语只对他一个人有意义。一个人不能创造个人私有的语言，也不能创造我们自己私有的价值观。</p></li><li><p>因为他认为一个人所追求的人生目标应该是有价值的，而不是随便什么目标都可以。这个人的人生与有个&quot;有意义人生&quot;的概念不相符，像这种微不足道的目标没有价值。我同意。</p></li><li><p>能，能。</p></li><li><p>因为他们无法正常的认识现实世界，他们的人生没有致力于有客观价值的某件事情，而是基于自己的幻想。论者认为幸福必须基于现实，他们并没有基于现实，因此目标也不具有客观价值。</p></li><li><p>会，因为他认为所有宗教都同意神灵是善良的、智慧的、乐于助人的、公平的。</p></li><li><p>有的。</p></li></ul><h4 id="存在主义者-终极意义的神话"><a class="markdownIt-Anchor" href="#存在主义者-终极意义的神话"></a> <strong>存在主义者 (终极意义的神话)</strong></h4><ul><li><p>在学校学习可以达到一个水平，这个水平可以带来更好的工作，得到一个更好的工作，得到一个更好的工作是有意义的。但海边度假不会导向任何目的，只是娱乐，不能导向就没有意义。</p></li><li><p>论者认为这和躺在海边的沙滩上一样是没有意义的。</p></li><li><p>我们很难了解上帝的规则，即使了解，也很难遵从。</p></li><li><p>有，有，能。滑雪者的意义很简单，假如他十年如一日的滑雪打破了某项滑雪世界纪录，想必就不会有人质疑其意义了，而且感受刺激，挑战人类极限本身也属于公认有意义的事情。</p></li></ul><ul><li><p>本质上是因为他以自己对生活方式的标准来定义幸福与最好，他们俩的行为都不符合他的价值观。</p></li><li><p>是的，呼吸吃饭不是我最终的人生目标。是我有意识自觉作出的选择。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择：存在主义者</div></pre></td></tr></table></figure><hr><h3 id="7-佛教是一种哲学吗"><a class="markdownIt-Anchor" href="#7-佛教是一种哲学吗"></a> 7 佛教是一种哲学吗</h3><h4 id="是佛教徒"><a class="markdownIt-Anchor" href="#是佛教徒"></a> <strong>是：佛教徒</strong></h4><ul><li><p>相信，可能，因为肉体的变化确实不受我们大脑思想直接控制(不能我希望身体健康就健康，只能间接通过饮食运动等来控制)。</p></li><li><p>因为人性欲望与现实固有本质之间产生了冲突</p></li><li><p>不。佛教不鼓励人们服从权威或信仰，当然也不鼓励人们信奉什么，而觉悟来自一个人自己的努力，不是来自信仰、恩赐或权威。</p></li><li><p>不是，我认为信仰神灵确实是基本条件。</p></li><li><p>觉悟要求理解自己和世界，理解后改变自己的情感行为，某种意义上可以说是自己对自己的拯救，而宗教概念的救赎多是指神灵对死后生命的拯救。获得救赎的主要障碍是原罪和作恶，而觉悟的主要阻力是无知和错觉。</p></li><li><p>因为更重要的是要理解基本事实，而不是担心无关紧要的细节。</p></li></ul><h4 id="不专家"><a class="markdownIt-Anchor" href="#不专家"></a> <strong>不：专家</strong></h4><ul><li><p>宗教和哲学相似的方式</p><ul><li><p>都关心上帝、神灵和信仰等有关的问题，都思考肉体与大脑之间的关系、对与错、最好的生活方式、信仰及信仰的理由等问题</p></li><li><p>对一些思想著作都非常认真的研读，彼此的组织都接纳有相同思想的人分享彼此的观点</p></li></ul></li><li><p>区别在态度上，宗教笃信、依靠崇拜和赞美，始于敬畏、爱、谦卑和恐惧等强烈情感，而哲学建立在批判基础上，要求怀疑、质疑和慎思，注重尽可能清晰地思考与论证，不为个人感情所左右</p></li><li><p>有的，第一点最重要，是其他三点的根基</p></li><li><p>没有，仅提供了证明各点内容的例证</p></li><li><p>不会，因为对宗教本质的认识需要长时间的研究、了解和渗透，几次活动远远不够，且无神论群众不会轻易拥有被弃置多年的信仰</p></li><li><p>我同意，因为人可以在面对不同事物时用不同的态度，对此人可以意识到两者的区别并有意识分开对待，再者人的思考中本身内在冲突就不少（所谓双重标准）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择：不是</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：首先，这是《Philosophical Dilemmas》第三版中译本《没有标准答案的哲学问题》的读书笔记~~（&lt;strong&gt;阅读理解&lt;/strong&gt;/课后习题/这次语文月考&lt;strong&gt;又挂&lt;/strong&gt;了哎）~~，全书共五章，每章约7个问题，回答包含两到三个立场，都是根本性的问题，难以回答，但还是试着做出选择并给出自己的理由，必然存在前后矛盾，尽力逻辑自洽。全部大概分成五次发，欢迎讨论，求指正。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一-上帝-永生与信仰&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-上帝-永生与信仰&quot;&gt;&lt;/a&gt; 一、上帝、永生与信仰&lt;/h2&gt;
&lt;h3 id=&quot;1-上帝存在吗&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-上帝存在吗&quot;&gt;&lt;/a&gt; 1 上帝存在吗&lt;/h3&gt;
    
    </summary>
    
      <category term="reading" scheme="http://blog.garenfeather.cn/categories/reading/"/>
    
    
      <category term="Philosophical Dilemmas" scheme="http://blog.garenfeather.cn/tags/Philosophical-Dilemmas/"/>
    
      <category term="philosophy" scheme="http://blog.garenfeather.cn/tags/philosophy/"/>
    
      <category term="god" scheme="http://blog.garenfeather.cn/tags/god/"/>
    
      <category term="life" scheme="http://blog.garenfeather.cn/tags/life/"/>
    
      <category term="belief" scheme="http://blog.garenfeather.cn/tags/belief/"/>
    
  </entry>
  
  <entry>
    <title>简单随意的几种编程语言正则支持比较</title>
    <link href="http://blog.garenfeather.cn/2015/01/16/%E7%AE%80%E5%8D%95%E9%9A%8F%E6%84%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%AD%A3%E5%88%99%E6%94%AF%E6%8C%81%E6%AF%94%E8%BE%83/"/>
    <id>http://blog.garenfeather.cn/2015/01/16/简单随意的几种编程语言正则支持比较/</id>
    <published>2015-01-16T09:52:17.000Z</published>
    <updated>2018-01-16T14:32:22.649Z</updated>
    
    <content type="html"><![CDATA[<p>那会用各种语言都写过正则匹配，随便乱比较了一下，比较语言包括python、C#和java，没什么逻辑，想到啥看到啥就写的啥，仅供参考</p><h2 id="一-版本"><a class="markdownIt-Anchor" href="#一-版本"></a> 一、版本</h2><ul><li>java8</li><li>C# 版本差异不大吧，不记得了</li><li>python 2.7</li></ul><hr><h2 id="二-比较"><a class="markdownIt-Anchor" href="#二-比较"></a> 二、比较</h2><h3 id="对应函数"><a class="markdownIt-Anchor" href="#对应函数"></a> 对应函数</h3><ul><li>python 的re模块中，search和match对应其他两种语言的match函数，确切的来说是search函数对应</li><li>python的match函数必须从字符串的第0位开始匹配一次，不存在则返回none（不明白这个函数究竟有什么用，正则表达式有自己的^符号来表示从头开始的匹配啊……）</li></ul><a id="more"></a><ul><li>findall函数则对应所谓matches的功能，java中并没有什么matches，只能通过Matcher对象的match()方法不断搜索下去达到相对的效果，C#的matches函数会返回一个MatchCollection匹配结果集合对象（java这个正则支持差评）</li><li>C#的Match对象通过match方法匹配、success属性返回成功与否的结果，匹配位置不会自行移动，要手动设定下一次匹配的offset（辅助参数有index和length来确定匹配位置），java的Matcher对象所用的find方法进行了匹配的同时返回匹配成功与否的结果（一顶C#俩），有start和end方法返回匹配位置，并且会自行随着匹配而移动下一次匹配开始的位置</li></ul><h3 id="操作方式包括compile-match-find等"><a class="markdownIt-Anchor" href="#操作方式包括compile-match-find等"></a> 操作方式（包括compile、match、find等）</h3><ul><li>python中用到的几种都是函数（type()结果为function），java有Pattern对象而C#有Regex对象，java有Matcher对象而C#有Match对象，java一般是用Pattern类的静态方法编译获得该对象，C#则通过以字符串为参数传统新建对象方式获得（new Pattern(str)）。两者的match（Matcher）对象都通过Pattern对象获得，而python则是将Pattern对象作为参数一起放入search（或者findall、match等等）方法中</li></ul><h3 id="功能完善"><a class="markdownIt-Anchor" href="#功能完善"></a> 功能完善</h3><ul><li>python对正则替换支持的最好，sub函数允许自行构建一个函数来对正则匹配的结果进行复杂的操作（这种操作方式的占了python本身“函数也可以是对象”的构建方式的优势），其他两种目测只能强行命名分组替换，需要更多的自行检测匹配结果</li></ul><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><ul><li>默认情况下python、java和C#的.符号都不支持匹配\n换行符，java和C#还不支持\r，C#似乎在一堆字符串里匹配到\r会出现迷之bug……（应该不是bug，还得多看doc）</li><li>java里面\r和\n都视为line terminator，遇到会终止匹配，而C#和python不视\r为line terminator，但是C#输出时作为回到行首符覆盖输出，通过输出我们看到的结果会不一样，而实际上其匹配结果跟python是一样的</li></ul><hr><h2 id="三-后言"><a class="markdownIt-Anchor" href="#三-后言"></a> 三、后言</h2><ul><li>……写的乱七八糟，将来怕是自己都看不懂</li><li>没准为了看得懂回头复习会有新的收获呢</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那会用各种语言都写过正则匹配，随便乱比较了一下，比较语言包括python、C#和java，没什么逻辑，想到啥看到啥就写的啥，仅供参考&lt;/p&gt;
&lt;h2 id=&quot;一-版本&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-版本&quot;&gt;&lt;/a&gt; 一、版本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java8&lt;/li&gt;
&lt;li&gt;C# 版本差异不大吧，不记得了&lt;/li&gt;
&lt;li&gt;python 2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;二-比较&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二-比较&quot;&gt;&lt;/a&gt; 二、比较&lt;/h2&gt;
&lt;h3 id=&quot;对应函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#对应函数&quot;&gt;&lt;/a&gt; 对应函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;python 的re模块中，search和match对应其他两种语言的match函数，确切的来说是search函数对应&lt;/li&gt;
&lt;li&gt;python的match函数必须从字符串的第0位开始匹配一次，不存在则返回none（不明白这个函数究竟有什么用，正则表达式有自己的^符号来表示从头开始的匹配啊……）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="coding" scheme="http://blog.garenfeather.cn/categories/coding/"/>
    
    
      <category term="python" scheme="http://blog.garenfeather.cn/tags/python/"/>
    
      <category term="c#" scheme="http://blog.garenfeather.cn/tags/c/"/>
    
      <category term="java" scheme="http://blog.garenfeather.cn/tags/java/"/>
    
  </entry>
  
</feed>
