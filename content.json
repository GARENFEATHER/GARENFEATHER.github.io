{"meta":{"title":"変わらないで","subtitle":"ダイスキでダイキライ","description":null,"author":"GarenFeather","url":"http://blog.garenfeather.cn"},"pages":[{"title":"About","date":"2017-06-16T06:56:04.769Z","updated":"2017-06-16T06:56:04.769Z","comments":true,"path":"about/index.html","permalink":"http://blog.garenfeather.cn/about/index.html","excerpt":"","text":""},{"title":"これで……分類ページ?","date":"2018-01-30T21:50:31.921Z","updated":"2018-01-30T21:50:31.919Z","comments":true,"path":"categories/index.html","permalink":"http://blog.garenfeather.cn/categories/index.html","excerpt":"","text":""},{"title":"大切なスケジュール","date":"2018-01-30T21:55:58.589Z","updated":"2018-01-30T21:55:58.588Z","comments":true,"path":"schedule/index.html","permalink":"http://blog.garenfeather.cn/schedule/index.html","excerpt":"","text":""},{"title":"これはラベルページ!","date":"2018-01-30T21:49:39.541Z","updated":"2018-01-30T21:49:39.540Z","comments":true,"path":"tags/index.html","permalink":"http://blog.garenfeather.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo博客NexT主题代码高亮MacPanel特效配置","slug":"hexo-next-macpanel-improved","date":"2018-03-15T18:04:26.000Z","updated":"2018-03-15T18:25:51.761Z","comments":true,"path":"2018/03/16/hexo-next-macpanel-improved/","link":"","permalink":"http://blog.garenfeather.cn/2018/03/16/hexo-next-macpanel-improved/","excerpt":"MacPanel代码高亮配置 原作：hexo-code-block 推荐这个MacPanel代码样式的原因： 漂亮精致，苹果家Mac相关设计一直还是比较得我心的ヾ(o◕∀◕)ﾉヾ 顶部栏可以展示代码所使用语言，有助于阅读者更好的阅读代码(≧▽≦)/ 直接按照原文操作无法正常展示，因此本文基于原作，针对NexT主题做了微小的修改使之正常显示","text":"MacPanel代码高亮配置 原作：hexo-code-block 推荐这个MacPanel代码样式的原因： 漂亮精致，苹果家Mac相关设计一直还是比较得我心的ヾ(o◕∀◕)ﾉヾ 顶部栏可以展示代码所使用语言，有助于阅读者更好的阅读代码(≧▽≦)/ 直接按照原文操作无法正常展示，因此本文基于原作，针对NexT主题做了微小的修改使之正常显示 版本 hexo: 3.3.7 hexo-cli: 1.0.3 NexT.Pisces: v5.1.4 highlights theme: night bright 效果展示 原作者博客效果： NexT.Pisces主题下适配成功效果： 适配修改过程 原本默认的，加上行号的代码展示效果是这样的： 现在我们来一步步修改：，首先照原博所说创建codeblock.js，并将css样式加入全局，这里我放在全局的custom.styl中 1234$ vim themes/next/scripts/codeblock.js //粘贴内容$ vim themes/next/source/css/_custom/custom.styl //style标签包裹后粘贴 然而重新部署后得到的结果却是这样的○|￣|_： 底部白边，上面部分挡字且行号列颜色与代码主题颜色不一显得不好看，所以我们首先使行列的底色与代码一致： 1$ vim themes/next/source/css/_common/components/highlight/highlight.styl 找到如下部分： 1234567.gutter pre &#123; padding-left: 10px padding-right: 10px color: $highlight-gutter.color text-align: right background-color: $highlight-gutter.bg-color&#125; 删除最后一行配置background-color: $highlight-gutter.bg-color，此时我们可以看见行号列底色与代码已经一致了 接下来处理白边和顶部。以我多年踩坑不倦的经验来看，不是margin就是padding出了问题，寻找测试一波后get正确参数。此时再次打开这个文件 1$ vim themes/next/source/css/_common/components/highlight/highlight.styl 找到如下部分代码，修改margin为36px 0 0 0： 123456789$code-block &#123; overflow: auto; margin: 20px 0; padding: 0; font-size $code-font-size; color: $highlight-foreground; background: $highlight-background; line-height: $line-height-code-block;&#125; 到此结束，get正确展示结果如下： 这里顺便推荐一个样式相似的代码生成图片项目：https://carbon.now.sh，生成代码格式非常漂亮，有一键发送到Twitter的功能，可调节参数很多 P.S 会不会原作者就是受该项目启发的？ 有感而发 持续折腾 作为一个明明不想写前端但又总是会被漂亮的东西吸引进而控制不住自己开始动手的后端选手，我能怎么办，我也很绝望啊 自己动手而又对前端不熟悉的结果就是往往会花费大量的时间。然而毕竟已经决定了基本发展方向，折腾着折腾着总觉得自己没把时间用在刀刃上，也不是天才，将来的发展也许会很受限吧 复制粘贴也不是容易的工作 俗话说开源大法好，shut up and show me your code. 开源意味着高度的自由，而高度的自由在局部必然是存在着混乱的 用人话来说就是代码当然有，能不跑完全是另一回事。万能的gayhub上多得是看起来漂亮实际上自带吨级bug的代码，好好的项目下下来demo都跑不动，复制粘贴真不是万能的，深入了解结构原理永远是条正解之路 开源作者不受约束天涯海角，挂了你都不知去哪找，所以说自己造轮子也真的是有意义的，自己写的代码好歹架构了然于心，关键时刻你还能抢救下自己 代码文档是一个问题，另一个问题我认为在于环境配置：所有正经写教程不交代清相关运行环境、版本信息的一概算耍流氓 说了这么多还不如赶紧保存一份能跑的代码，以后再也别动它了 Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"theme-next","slug":"theme-next","permalink":"http://blog.garenfeather.cn/tags/theme-next/"},{"name":"css","slug":"css","permalink":"http://blog.garenfeather.cn/tags/css/"}]},{"title":"my-mermaid-please","slug":"my-mermaid-please","date":"2018-03-07T13:43:22.000Z","updated":"2018-03-22T21:42:24.746Z","comments":true,"path":"2018/03/07/my-mermaid-please/","link":"","permalink":"http://blog.garenfeather.cn/2018/03/07/my-mermaid-please/","excerpt":"test 12345var exec = require('child_process').exec;hexo.on('new', function(data)&#123; exec('open -a MacDown ' + data.path);&#125;);","text":"test 12345var exec = require('child_process').exec;hexo.on('new', function(data)&#123; exec('open -a MacDown ' + data.path);&#125;); .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } master, 73c8a93bb25b88512ea780d7aa02newbranch, dfe75e0e837516 .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } Get moneyOneTwoThreeChristmasGo shoppingLet me thinkLaptopiPhoneCar .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } ABCD .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } Class01int chimpint gorillasize()AveryLongClassClass03Class04Class05Class06Class07Object[] elementDataequals()Class08Class09C2C3CoolWhere am i?Cool label undefined .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } AliceBobJohnHello John, how are you?Fight against hypochondrialoop[ Healthcheck ]Rationalthoughts prevail...Great!How about you?Jolly good!AliceBobJohn","categories":[{"name":"test","slug":"test","permalink":"http://blog.garenfeather.cn/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://blog.garenfeather.cn/tags/test/"}]},{"title":"在印度的工程师朋友说，Let's debug this together!","slug":"let's-debug-this-together","date":"2018-03-02T07:23:20.000Z","updated":"2018-03-22T23:11:55.734Z","comments":true,"path":"2018/03/02/let's-debug-this-together/","link":"","permalink":"http://blog.garenfeather.cn/2018/03/02/let's-debug-this-together/","excerpt":"我是谁我在哪我在干嘛 首先简单的区分下这三个概念↓ PaaS、IaaS、SaaS 谷歌随便找了一张图，感觉三者的区别还是很明显的↓","text":"我是谁我在哪我在干嘛 首先简单的区分下这三个概念↓ PaaS、IaaS、SaaS 谷歌随便找了一张图，感觉三者的区别还是很明显的↓ 图上IaaS和PaaS的区别在于Operating System和Database，不过实际上感觉通常被我们认为是IaaS的AWS还有GCP等都有提供OS级别的管理。不过OS的创建是用户自行选择的，认为平台本身不提供似乎也合理？ 我想干嘛 最近对由于对网络的特♂殊♂需♂求升级（国内旁友们应该都懂哈），再加上没钱（其实是为了省钱买糖），开始钻研起了歪门邪道，经过对各种方案的对比整理、原理用法钻研、踩坑跳坑出坑，终于将技术上的需求明确下来了： 自带基础设施的云平台（Platform as a Service） 有至少一个免费、不限时的配额 支持基于docker/nodejs部署app 操作流程可理解、相对简洁 要求自带基础设施是因为在找的过程中发现有的平台虽然自称是PaaS，但实际上可以认为是只提供一套基于IaaS的部署工具——或者说应用管理方案。这种平台他们自己的部署工具大多有一套架构、对应的CLI，但基础设施还是别人的。具体表现在看doc你会发现他们要求你有Digitalocean、GCP或者AWS等IaaS才能部署 ……emmmm这要都有一台自己的VPS了还要你们何用，参照上一条的定义，这样的平台并不能算作PaaS 我在干嘛 晚上吃饭的时候一时兴起翻到了一个free for dev列表，理所当然就顺着列表的PaaS、IaaS还有Docker related项翻了起来，最后翻来覆去的试了十几个，加上前几天的浏览整合了下，感觉大概符合要求能用的也就几个： Bluemix：乍看上去不复杂，有自己的CLI工具也有配合Pivotal Cloud Foundry的CLI插件，列入考虑 Openshift：因为是基于Kubernetes架构，一个pod一个app过程极其简单，然而用了不到两天就被ban了…… Hasura：微服务同样基于Kubernetes架构，本回的主角 Pivotal Cloud Foundry：流程复杂了点（要部署docker app要设置diego_docker项，设置该项要admin用户，admin用户要自己创建，自己创建admin又要通过自行部署他们的UAA服务来创建，而这个服务无论是本地还是线上都部署失败），在Github提了issue，后面有空再慢慢跟进吧 Arukas：还没试就在当晚被告知注册要排队很久，还要绑定银行卡，而且部署的非法app很快就会被ban，遂放弃 综上所述，当晚摸鱼就决定试试hasura了！ Let’s debug this together 大致过程 先总结下印度工程师朋友的debug思路： hasura setup确保工程整体初始化 怀疑git状态，确认git status与git remote正常， 确认他们的CLI版本最新 打开hasura debug，后台源代码查看错误 中途我怀疑可能是墙还是user的问题所以擅自切到了root账号上了代理 root账号多报了个credentials的错误，hasura cluster get-credentials -c hasura执行也有返回错误 被发现切了账号，hasura user-info确认了原本的user正常工作后切回了普通用户 发现我是在VM里操作的，怀疑我弄混了VM和本机设置（……） 进一步确认git status正常 确认$HOME变量正常 后台发现错误是在 git library 里抛出来的，怀疑到 git版本 问题上了 检查发现我还在使用古老的1.8.xx版本，遂试试升级git It works！That’s awesome! 报错细节 参照doc，安装CLI，注册好账号，建好project和cluster以及microservice节点，到了git push hasura master这一步的时候出现了问题 123456789The authenticity of host &apos;xx.hasura-app.io (xx.xx.58.177)&apos; can&apos;t be established.ECDSA key fingerprint is b5:xx:09:72:xx:xx:1e:67:d4:e6:e7:xx:76:xx:0f:xx.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;xx.hasura-app.io,xx.xx.58.177&apos; (ECDSA) to the list of known hosts.Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 起初以为是网络的问题，挂了代理试了一下，还是报错 12345ssh_exchange_identification: Connection closed by remote hostfatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 束手无策，点击了右下角的webim图标将自己的问题发了过去，没期待能得到回复 意外的是很快就有人回复了我，看了下信息，似乎是个在印度的工程师朋友（妈呀还是k8s相关开发） 意外的是很快就有人回复了我，看了下信息，似乎是个在印度的工程师朋友 根据指示设置好其他一切漏的设置后接下来git push hasura master基本上都固定报一个错了 123$ git push hasura master× Pushing project failed error=reference not founderror: failed to push some refs to &apos;ssh://hasura@xxx.hasura-app.io:22/~/git/xxx&apos; 于是开始一起debug…… 因为习惯Linux敲命令行了哈哈哈 git版本太老 为什么是ssh不是常规git协议 为什么用虚拟机操作 通过他们的Gateway设置http准备好自动跳转https 问题分析 普通Github工程remote显示如下： 123$ git remote -vorigin git@github.com:youusername/yourreponame.git (fetch)origin git@github.com:youusername/yourreponame.git (push) 该工程的remote显示如下 123$ git remote -vhasura ssh://hasura@xxx.hasura-app.io:22/~/git/xxx (fetch)hasura ssh://hasura@xxx.hasura-app.io:22/~/git/xxx (push) 通过remote可以明显看出他们的服务器不是一般的git server，问了下了解到他们确实是用的ssh server代替常规的git server，而低版本的git在解析ssh的时候似乎会出现问题，所以才一直报的error 实话说这个问题确实不好发现，如果没有后台查代码辅助，我应该是无论如何不会想到git的问题上的，云平台连接报错我总是会怀疑到国内神奇的网络环境上…… 思维还是局限了点，也不知道是受限于经验还是知识了，不过这锅还是甩到墙上吧哈哈哈╮(╯▽╰)╭ 后（fei）记（hua） 为何如此高兴 最近沉迷云平台，到处试用，用过的大部分平台虽说有人工求助接口，但很少能回复，更别说是及时回复，更更不用说一直跟着你手把手debug指导问题解决了。当然相信这里面原因复杂，时差、平台规模、bug本身都是阻碍，也不能一味的就说平台的服务不好吧 不管是时差正好对上了，还是他们的服务就是如此及时，快速的响应、耐心的帮助总是很让人感动的。 从他们的CLI版本还在0.15.x来看，估计平台建好还不久，用户群体没那么庞大，所以人工服务才如此及时吧，不知道将来规模大了还能不能如此快准稳哈哈哈 这次debug体验就像一次远程的结对编程，解决问题的那一瞬间非常开心，还顺便加了他们的discord讨论群，顺便问了下why not slack，顺便一起作为扩展阅读参考吧 hasura：为什么讨论平台从slack迁移到了discord react：为什么讨论平台从slack迁移到了discord 英语表达与知识体系 记得以前看过一篇公众号文章，大意是我们获得的大部分知识都停留在某个浅薄的级别上，没有深入理解，不能实际应用，更无法举一反三 从自己的英文水平上深刻的感受到了这一点 平常也会看小说，看技术文章，阅读量能勉强维持住，读到复杂颠倒的语句也能理解其意思，但真到了说的时候蹦出来的还是那几句小学英语（I wil、Can I、I should、how…），语序也基本还是中文思考的语序。大概就是只能说出I really feel disappointed而说不出It clearly a bummer的水平吧。 扎心了，好几次交流途中都感觉无法完整表达出自己的意思，只能拐个弯。句式词汇单一反倒不是最难过的，毕竟交流只要能传达出意思就是胜利，然而事实上就是传达不出自己原本想表达的意思……╮(╯_╰)╭很难过了 慢慢来吧，希望工作后还能有时间精力加强英文水平 最后 Let’s debug this together！ Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"wall","slug":"wall","permalink":"http://blog.garenfeather.cn/tags/wall/"},{"name":"hasura","slug":"hasura","permalink":"http://blog.garenfeather.cn/tags/hasura/"},{"name":"git","slug":"git","permalink":"http://blog.garenfeather.cn/tags/git/"},{"name":"paas","slug":"paas","permalink":"http://blog.garenfeather.cn/tags/paas/"},{"name":"docker","slug":"docker","permalink":"http://blog.garenfeather.cn/tags/docker/"}]},{"title":"去中心化系统说明","slug":"decentralization-system-analysis","date":"2018-02-25T04:03:21.000Z","updated":"2018-03-22T19:51:52.025Z","comments":true,"path":"2018/02/25/decentralization-system-analysis/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/25/decentralization-system-analysis/","excerpt":"英文原文：https://medium.com/@VitalikButerin/the-meaning-of-decentralization-a0c92b76a274 翻译：https://media.weibo.cn/article?id=2309404214118084135438&amp;jumpfrom=weibocom 一篇比较好的去中心化叙述，特此笔记 如何判断去中心化","text":"英文原文：https://medium.com/@VitalikButerin/the-meaning-of-decentralization-a0c92b76a274 翻译：https://media.weibo.cn/article?id=2309404214118084135438&amp;jumpfrom=weibocom 一篇比较好的去中心化叙述，特此笔记 如何判断去中心化 总体来说，相互独立，缺一不可的三个层次 架构层 物理世界里系统由多少台计算机组成？ 运行过程中，能忍受多少台计算机崩溃而不受影响 政治层 组成系统的计算机集群的所有权 个人？组织？多少个人或组织？ 逻辑层 设计接口和数据结构来看，更像哪种？ 一台完整的单一设备（如：分布式数据库） 一个由无数单位组成的集群 如果把这个系统分成两半，两部分里同时包含生产者和消费者，这两部分能作为独立单元，完整的运行下去吗 示例 去中心化 架构层 政治层 逻辑层 传统公司 × × × 直接民主政治 × × √ 大陆法 ×√(之间) × × 区块链、普通法 √ √ × CDN内容分发网络 √ × √ BitTorrent、英语语言 √ √ √ ？ × × √ ？ × √ √ ？ √ × × 大陆法依赖一个中心立法机构 普通法是由很多法官作为个人做出的许多先例构成的（？） 然而法律就是法律，因此逻辑层中心化 叙述 大多数情况下逻辑层的中心化代表了比较好的选择 区块链的中央数据库，即公共账本，逻辑层上是中心化的 有人认为逻辑层也要尽可能的去中心化，理由是其往往在网络分区上更有生存能力，即在连接性比较差的世界里运行情况会更好 为什么很重要/好处在哪 三个优点：容错性、抗攻击性、抗勾结性（某种程度上也是一般分布式系统所具有的优势？尤其是前两个条件） 容错性 .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } 然而组织组织国家集团一台计算机故障概率&gt;十台计算机五台故障共模故障同代码客户端同个bug内部勾结影响协议, 团队国家接管矿场一个权益证明的区块链中70%币由一个交易所持有 初级容错能力：关注架构层上的去中心化设计 系统长远升级和发展时的容错性：重视政治层上的去中心化 抗攻击性 攻防特点：攻防具有不对称性，攻击者往往更占优势 示例：一个人的生命受到威胁，他的5000万很容易被抢走，但如果这5000万是十个人分散持有的，必须同一时间威胁勒索的人数瞬间放大十倍 得到的部分结论（未完全理解）： 工作量证明机制（POW）不如权益证明机制（POS）更安全。POW需要挖矿计算机，POS针对权益证明即代币，币相对计算机更容易隐藏 开发区块链的团队分布的越广泛（包括地理位置）越有利 设计共识协议时需要同时考虑经济和容错模型 扛勾结性 定义：勾结就是我们所不喜欢的协调方式 理想状态下，每个人之间都有完美的协调 一部分人能完美协调，另一部分无法协调时情况就会变得危险 反勾结就是尽可能避免节点之间相互协调，即假设一个区块链网络是由许多独立决策的节点组成的 很多社区（包括以太坊）之所以存在，是因为有一个强大的社区精神呢，在执行、发布和激活硬分叉上拥有快速协调的优势 需要改善和培育良好的协调关系，防范糟糕的协调关系，防止“互相勾结”的演变，因此要做到以下三点： 用协议的方式彻底消灭勾结 找到能更好发展且不足以勾结平衡点 让好的协调关系更容易，坏的协调关系更难（社会学挑战） 抗勾结性的去中心化可能是目前最难实现的 感想与疑问 感想 三权分立之类的基本思想内容是不是包含了很接近去中心化的概念（……） 这篇感觉更多是社会学、经济学，而不是技术学的领域了 疑问 Multi-Master形式部署的话，架构上Master也有多个节点，可以忍受一定数量的破坏，政治层不谈，逻辑层上看起来也更像一个集群（注：系统分成两半问题可以用network partitions的方式来回答，如果两半都有主备节点，理论上可以继续运行），但这种部署我们还是说是中心化部署，为何？因为他是你的Master吗？ Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"decentralization","slug":"decentralization","permalink":"http://blog.garenfeather.cn/tags/decentralization/"},{"name":"concept","slug":"concept","permalink":"http://blog.garenfeather.cn/tags/concept/"},{"name":"blockchain","slug":"blockchain","permalink":"http://blog.garenfeather.cn/tags/blockchain/"}]},{"title":"nodejs开发环境下使用jsdom插件关于textContent的小bug","slug":"nodejs-jsdom-plugin","date":"2018-02-22T12:11:18.000Z","updated":"2018-03-22T13:55:34.474Z","comments":true,"path":"2018/02/22/nodejs-jsdom-plugin/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/22/nodejs-jsdom-plugin/","excerpt":"背景 我在干啥 markdown渲染引擎的markdown-it的mermaid插件开发中 开发中插件markdown-it-mermaid-x、插件依赖项目mermaid，测试项目testProject 项目A最终是在浏览器环境下运行的所以用到了document、window等js的DOM对象 为了优先验证B的代码正确与否（暂不考虑webpack打包等带来的bug），选择了个workaround的方案，在C中使用jsdom伪造一个DOM提供window和document","text":"背景 我在干啥 markdown渲染引擎的markdown-it的mermaid插件开发中 开发中插件markdown-it-mermaid-x、插件依赖项目mermaid，测试项目testProject 项目A最终是在浏览器环境下运行的所以用到了document、window等js的DOM对象 为了优先验证B的代码正确与否（暂不考虑webpack打包等带来的bug），选择了个workaround的方案，在C中使用jsdom伪造一个DOM提供window和document 开发环境版本 node：v6.9.0 npm：3.10.8 jsdom：^11.6.2 开发中 具体表现 通过document.createElement('div')新建一个div对象elt，给elt内容赋值部分： 123const elt = document.createElement('div')elt.className = 'mermaid'elt.innerText = code 取出值使用 1const txt = elt.textContent; 而经过验证，console.log(txt)输出的值为空 使用对应的如下写法值能正常输出 1const txt = elt.innerText; 分析 这部分的代码基本上是参考了同样使用了mermaid作为扩展的StackEdit的mermaid扩展部分代码的写法， 对比了一下我的代码部分与其区别应该只是使用了jsdom建了一个伪造的DOM 同时根据浏览器console里运行的结果elt.innerText与elt.textContent都能输出正确的结果 目前暂且记录下这个小bug，将来有机会深入研究再考虑提issue 后来进一步踩坑，大致上可以确定这个bug本身没有什么特别的，基本上是jsdom、d3、svg支持之间的问题了 d3项目似乎要求必须在浏览器环境下执行，而jsdom所模拟的浏览器环境缺乏对svg的相关支持（见jsdom的issue部分），因此一切基于jsdom模拟浏览器环境的插件皆不可用 ，不再深入研究** 吐槽 ╮(╯▽╰)╭找了半天才发现这里变空了，完全没想到 beyond compare都开了对比半天愣是没明白，一句一句对着改了半天才发现 Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"mermaid","slug":"mermaid","permalink":"http://blog.garenfeather.cn/tags/mermaid/"},{"name":"nodejs","slug":"nodejs","permalink":"http://blog.garenfeather.cn/tags/nodejs/"},{"name":"opensource","slug":"opensource","permalink":"http://blog.garenfeather.cn/tags/opensource/"},{"name":"jsdom","slug":"jsdom","permalink":"http://blog.garenfeather.cn/tags/jsdom/"}]},{"title":"Google家开源的puppeteer使用bug修复","slug":"google-puppeteer-plugin-develop","date":"2018-02-21T11:10:18.000Z","updated":"2018-03-22T14:04:35.254Z","comments":true,"path":"2018/02/21/google-puppeteer-plugin-develop/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/21/google-puppeteer-plugin-develop/","excerpt":"使用及故障 在干啥 在开发mermaid插件（没错我还在持之以恒的死磕）过程中确认到mermaid渲染必须在有浏览器的情况下才能正确渲染，考虑了以下两种headless browser phantom，node插件为phantom，先考虑这个是因为用过PhantomJS，本机和服务器上也都有装。然而据说已经没人维护了（两年没出新版本？），跑起来也有很多迷之bug（API都找不全），遂放弃 puppeteer，mermaid的开发者有提供官方的cli工具行就是基于此开发的，至少可以确认可运行","text":"使用及故障 在干啥 在开发mermaid插件（没错我还在持之以恒的死磕）过程中确认到mermaid渲染必须在有浏览器的情况下才能正确渲染，考虑了以下两种headless browser phantom，node插件为phantom，先考虑这个是因为用过PhantomJS，本机和服务器上也都有装。然而据说已经没人维护了（两年没出新版本？），跑起来也有很多迷之bug（API都找不全），遂放弃 puppeteer，mermaid的开发者有提供官方的cli工具行就是基于此开发的，至少可以确认可运行 天坑故障系列集合 缺包 首先项目里正常安装 1$ npm i puppeteer --save 安装过程没报错，运行demo的时候就开始爆炸了 1234567891011121314Promise &#123; &lt;pending&gt;, domain: Domain &#123; domain: null, _events: &#123; error: [Function: debugDomainError] &#125;, _eventsCount: 1, _maxListeners: undefined, members: [] &#125; &#125;&gt; (node:65773) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: Failed to launch chrome!/home/garen/Desktop/testProject/node_modules/puppeteer/.local-chromium/linux-536395/chrome-linux/chrome: error while loading shared libraries: libXss.so.1: cannot open shared object file: No such file or directoryTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md 进入安装目录查看： 1$ cd node_modules/puppeteer/.local-chromium/linux-536395/chrome-linux/ 检查bug的时候有小伙伴说可能是内核的原因，不过个人感觉更新内核还是要谨慎，顺便检查了下内核版本 1234567891011121314151617181920$ cat /etc/*-releaseCentOS Linux release 7.2.1511 (Core) NAME=&quot;CentOS Linux&quot;VERSION=&quot;7 (Core)&quot;ID=&quot;centos&quot;ID_LIKE=&quot;rhel fedora&quot;VERSION_ID=&quot;7&quot;PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;ANSI_COLOR=&quot;0;31&quot;CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;HOME_URL=&quot;https://www.centos.org/&quot;BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;CentOS Linux release 7.2.1511 (Core) CentOS Linux release 7.2.1511 (Core) 应该不需要……继续检查 123$ ldd chrome | grep not./chrome: /lib64/libnss3.so: version `NSS_3.22&apos; not found (required by ./chrome) libXss.so.1 =&gt; not found 可以发现有两个not found，一个个解决。重新运行了下上面的命令，定位一下 12345678$ ldd chrome...linux-vdso.so.1 =&gt; (0x00007ffcbbf62000)libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f94b90a8000)libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f94b8ea4000)librt.so.1 =&gt; /lib64/librt.so.1 (0x00007f94b8c9b000)libX11.so.6 =&gt; /lib64/libX11.so.6 (0x00007f94b895d000)... 发现能够正常找到的so文件基本都在/usr/lib目录下，然后查找缺失的so文件： 12345$ locate libXss.so.1/usr/lib/vmware-tools/lib32/libXss.so.1/usr/lib/vmware-tools/lib32/libXss.so.1/libXss.so.1/usr/lib/vmware-tools/lib64/libXss.so.1/usr/lib/vmware-tools/lib64/libXss.so.1/libXss.so.1 ……所以其实文件是有的，只是不在对的目录？试着把vmware-tools目录下的libXss.so.1移到/usr/lib目录下，并没有用。重新搜索，以下方案在我的虚拟机上成功： 1# yum install libXScrnSaver-1.2.2-6.1.el7.x86_64 装完后再执行相同的命令，报错变成了： 12$ ldd chrome | grep not./chrome: /lib64/libnss3.so: version `NSS_3.22&apos; not found (required by ./chrome) 少了一个，继续试试……按照上面的troubleshooting文件，一口气先确保安装了所有CentOS需要的依赖 1yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 ipa-gothic-fonts xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-utils xorg-x11-fonts-cyrillic xorg-x11-fonts-Type1 xorg-x11-fonts-misc 安装完还是老样子并没有回复╮(╯▽╰)╭，果然不会这么简单就解决的。看起来问题出在安装的chromium（从目录上看序号大概是***536395***？）上，试着换个puppeteer看看安装的版本会不会变化。查看package.json确认当前版本为1.1.1最新版，试着降到1.1.0、1.0.0版本 1.1.0版本安装过程部分如下： 123&gt; node install.jsDownloading Chromium r536395 - 96.2 Mb [====================] 100% 0.0s 从序号上可以发现还是同一款的chromium，降到1.0.0发现序号开始不同了： 123&gt; node install.jsDownloading Chromium r526987 - 97.1 Mb [====================] 100% 0.0s 安装好后再试一试，当然还是没什么卵用啦【微笑渐渐消失.jpg 继续艰苦的Google搜索，最后发现了看起来可靠的操作（跪谢这位大佬，好人一生平安） 于是尝试了这个方法，这里国内的小伙伴们注意下，这个操作似乎需要挂代理（但是直接ping mirror.webtatic.com显示又正常，不太明白这里），不然会超时阻塞，报类似的错如下： 12Could not retrieve mirrorlist https://mirror.webtatic.com/yum/el7/x86_64/mirrorlist error was12: Timeout on https://mirror.webtatic.com/yum/el7/x86_64/mirrorlist: (28, &apos;Operation timed out after 30000 milliseconds with 0 out of 0 bytes received&apos;) 我这里挂了proxychains4设置好的代理执行操作： 12345678910111213141516171819202122232425262728# proxychains4 yum provides */libnss3.so......nss-3.28.4-12.el7_4.x86_64 : Network Security ServicesRepo : updatesMatched from:Filename : /usr/lib64/libnss3.sonss-3.28.4-15.el7_4.i686 : Network Security ServicesRepo : updatesMatched from:Filename : /usr/lib/libnss3.sonss-3.28.4-15.el7_4.x86_64 : Network Security ServicesRepo : updatesMatched from:Filename : /usr/lib64/libnss3.sonss-3.28.4-15.el7_4.x86_64 : Network Security ServicesRepo : @updatesMatched from:Filename : /usr/lib64/libnss3.so...... 选择了最新的一个match目录/usr/lib64/libnss3.so的版本，yum安装 1# yum install nss-3.28.4-15.el7_4.x86_64 安装完后再执行操作检查，没有缺包了！哦也！(o)/ 12$ ldd chrome | grep not$ 沙盒环境存在问题 上面解决完后新的bug立刻就来： 12(node:72791) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Failed to launch chrome![0310/051527.838287:FATAL:zygote_host_impl_linux.cc(126)] No usable sandbox! Update your kernel or see https://chromium.googlesource.com/chromium/src/+/master/docs/linux_suid_sandbox_development.md for more information on developing with the SUID sandbox. If you want to live dangerously and need an immediate workaround, you can try using --no-sandbox. 这个解决方案很清晰了，直接修改launch的参数 1const browser = await puppeteer.launch(&#123; args: ['--no-sandbox', '--disable-setuid-sandbox'] &#125;); 后记 都是一把辛酸泪啊……开源皆天坑果然是真理○|￣|_ 要……有……耐……心 有时候是ZhenJiang不知道为这种乱七八糟的坑花费时间到底值不值啊Orz Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"puppeteer","slug":"puppeteer","permalink":"http://blog.garenfeather.cn/tags/puppeteer/"},{"name":"google","slug":"google","permalink":"http://blog.garenfeather.cn/tags/google/"},{"name":"mermaid","slug":"mermaid","permalink":"http://blog.garenfeather.cn/tags/mermaid/"},{"name":"nodejs","slug":"nodejs","permalink":"http://blog.garenfeather.cn/tags/nodejs/"},{"name":"opensource","slug":"opensource","permalink":"http://blog.garenfeather.cn/tags/opensource/"}]},{"title":"Paxos核心思想、流程、扩展与思考学习记录","slug":"paxos-learn-extension","date":"2018-02-17T18:27:34.000Z","updated":"2018-03-22T14:22:58.897Z","comments":true,"path":"2018/02/18/paxos-learn-extension/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/18/paxos-learn-extension/","excerpt":"","text":"Paxos核心思想、流程、扩展与思考学习记录 参考：如何浅显易懂地解说 Paxos 的算法？ 一致性基本内容 基础概念 允许一定数量进程挂掉 达成一致性是指半数以上同意 三大核心要求 合法性（Validity）：达成一致性值value必须是由某个进程提出的 共识性（Consensus）：一旦就value值达成一致，不能再对另一个value达成一致 可终止性（Termination）：一致性总是能达成（非理论定义上，详见FLP问题，简而言之异步环境下任何一致性算法都存在永不终止的可能） 理解本质 一旦提案I达成一致性，任何比该提案ID更大的提案内容都会被“渲染”成提案I的内容，从而实际意义上结束流程。因为任意两个多数集合必然有交集，而达成一致的提案ID一定最大，在下一个提案中选取已回复的最大ID提案就必然会选中已达成一致的提案 从概念上看，对acceptor来说第一个提案无法拒绝，任意ID大于当前已接受提案的新提案也没有理由被拒绝，必须接受 注意一下提案ID与提案的值分离，提案ID是取决于proposer通过某种方式（例如已经得到实现的全局自增id）获得的ID，但其提案值取决于预提案阶段收到的acceptor们的返回值 流程 阶段一 预提案阶段： 提议者Proposer：向接受者Acceptor广播预提案，附带接下来提案Proposal的proposal_id 接受者Acceptor：收到预提案后更新a_proposal_id = max(proposal_id,a_proposal_id)，如果预提案的proposal_id&gt;a_proposal_id，Acceptor回复记录的接受过的proposal_id最大的提案，并承诺不再接受比预提案中附带的proposal_id更小的提案 阶段二 提案阶段： 提议者Proposer：等待直到收到大多数接受者对预提案的回复，从所有回复的提案组成的法定数目的提案集合K中挑选proposal_id最大的提案，以该提案的值作为本次提案的值。如果K是空集，那么可以给提案任意赋值。然后把该提案广播给接受者们，提案和预提案共享同一个proposal_id 接受者Acceptor：如果收到的提案的proposal_id&gt;= a.proposal_id，那么接受这个提案，更新a_proposal_id = max(proposal_id,a_proposal_id)，更新记录的提案 扩展 理解误区 分清提案和预提案两个不同的阶段，预提案阶段不会接受提案，不同的proposer处于不同的阶段，一个proposer获得多数acceptor的响应后结束其预提案阶段 当前整个环境中不同proposer两个阶段混杂进行，而信息是进程间沟通的唯一手段，预提案本质上起了消息传递扩散的作用 算法结果不唯一，时间顺序对结果有很大的影响，一定程度上取决于谁能更快的走完整个流程，即最快争取到半数同意 活锁 流程 .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } 提案i提出预提案i+1截胡i=i+1 这一般是纯理论上的问题，实际工程应用上分布式系统应该并不会出现如此“有序”的场景（一环扣一环，卡死提案的通过提交），而且若进程数总量一定，最终递归还是会被停止的？ 其他工程实现细节（待补充） 全局唯一自增ID Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"distributed","slug":"distributed","permalink":"http://blog.garenfeather.cn/tags/distributed/"},{"name":"paxos","slug":"paxos","permalink":"http://blog.garenfeather.cn/tags/paxos/"},{"name":"algorithm","slug":"algorithm","permalink":"http://blog.garenfeather.cn/tags/algorithm/"},{"name":"consistency","slug":"consistency","permalink":"http://blog.garenfeather.cn/tags/consistency/"}]},{"title":"开放后端答题（2）——语言、堆栈、工作流、溢出与泄漏","slug":"backend-schedule-02","date":"2018-02-15T10:12:44.000Z","updated":"2018-03-22T21:52:29.478Z","comments":true,"path":"2018/02/15/backend-schedule-02/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/15/backend-schedule-02/","excerpt":"五、语言相关问题 告诉我你的首选语言的三个最坏的缺陷 Python语言 动态 弱类型 运行速度限制","text":"五、语言相关问题 告诉我你的首选语言的三个最坏的缺陷 Python语言 动态 弱类型 运行速度限制 什么是栈？什么是堆？ 栈（Stack）在中文中又被称为堆栈，但其实堆和栈是两个数据结构，中文语境下要注意区分，同时也要注意在讨论***数据结构***和***计算机内存***时的堆与栈有一定的区别，堆的区别比较明显 栈为标准的LIFO后进先出，经典操作即push和pop 堆（Heap）通常是一个可以被看做一棵树的数组对象，堆总是一棵完全树（其节点序号能与相应的最大满二叉树完全对应）。通常说的堆是指二叉堆，属于二叉树的一种。所有节点都比后续节点大/小的堆叫最大/小堆 结构（完全树二叉树示例，节点序号为数组下标） .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } 01234567 * 堆操作 |操作|说明| |:---:|:---:| |build|创建一个空堆| |insert|向堆中插入一个新的元素| |update|将新元素提升使其匹配堆的性质| |delete|删除堆顶元素| |get|获取堆顶元素| |heapify|删除堆顶元素后使之再次符合堆的数据结构关系| 堆与栈都是可以被认为是一种特殊结构的数组，即是说可以通过数组配合相应的限制可以实现这两数据结构（当然还有链表的部分性质） 对一般的运行程序来说，堆通常都是用来存储对象的，而栈通常用于运行程序 栈本身后进先出的数据结构与函数调用，嵌套运行的结构相符，因此用于运行程序，而通常局部的、临时的变量分配也都在栈上 注意堆在计算机内存中的结构与数据结构的堆有很大区别。以C++为例，堆空间通常是不连续的，结构更接近链表而不是数组，受物理内存限制，效率要比栈低得多 基于两者特性，再综合一下程序运行所需内容：编译好的二进制代码、对象、（静态）变量、常量等，就不难理解Java（程序计数器，方法区，虚拟机栈，本地方法栈，Java堆）或C++（堆区，栈区，全局静态区，常量区，程序代码区）中的内存划分依据了 协议栈（Protocol Stack）的“栈”的概念与上述的基本没有太大关系，不做详细介绍 七、代码版本管理相关问题 能描述下什么是GithubFlow和GitFlow工作流吗？ 这两种都是基于分支，为协同开发而创造的工作流。除了主干分支，其他分支主要用于功能开发、修复bug等等，基本上新分支完成其任务后会合并到主干分支，主干分支的核心目的是发布与部署 GitFlow的特性适用于版本发布，一般来说有master和develop两个主要分支，辅助分支包括hotfix、feature、release等等，develop分支是主要开发分支，开发完成后合并到此分支，发布成功后合并到master分支 GithubFlow的特征则适用于“敏捷开发”等，即随时修改完代码随时发布的流程模式，没有develop分支，但是若考虑到代码合并进master分支与线上发布未必在同一时间（例如对master主干代码的大规模回归测试，到指定日期才发布等） 各处常见的资料介绍经常将Pull Request放到GithubFlow中介绍，但实际上Pull Request可以跟包括这两者在内的其他各种诸如ForKing工作流一起协作 PS:there is no difference in the GitHub flow between a hotfix and a very small feature. 这两种工作流模式都是针对单一仓库的，而ForKing工作流在于其分布式工作的特性，即每个开发者在自己的仓库、自己的分支上完成相应开发，其明显的优势是项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限 九、逻辑和算法相关问题？ 写一段有栈溢出的代码 内存溢出（参考java）：栈溢出（StackOverFlow）、堆溢出（OutOfMemoryError）。结合堆与栈通常在程序中的用法，堆用于分配对象，那么只要永不停息的分配新对象不回收自然会堆溢出；而栈如果作为函数调用栈则深度有限，那么只要不断深入调用（最经典操作：无限递归），自然会栈溢出 栈溢出： 1234public void sofMethod()&#123; depth ++ ; sofMethod();&#125; 堆溢出： 12345678public void sofMethod()&#123; List&lt;byte[]&gt; list = new ArrayList&lt;&gt;(); int i=0; while(true)&#123; list.add(new byte[5*1024*1024]); System.out.println(\"分配次数：\"+(++i)); &#125;&#125; 写一段有内存泄漏（Memory Leak）的示例代码 注意区分内存溢出和内存泄漏，关键在于溢出（Overflow） 和 泄漏（Leak） 两个概念要区别开来，同样概念适用于栈/堆溢出等 12345678#include &lt;stdio.h&gt;int main() &#123; char *c; c=(char*)malloc(256*sizeof(char)); //这里分配的内存没有回收，且后续无法控制，虽然程序不会崩溃，但符合定义 c=(char*)malloc(256*sizeof(char)); return 0;&#125; Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"backend","slug":"backend","permalink":"http://blog.garenfeather.cn/tags/backend/"},{"name":"language","slug":"language","permalink":"http://blog.garenfeather.cn/tags/language/"},{"name":"workflow","slug":"workflow","permalink":"http://blog.garenfeather.cn/tags/workflow/"},{"name":"overflow","slug":"overflow","permalink":"http://blog.garenfeather.cn/tags/overflow/"},{"name":"leak","slug":"leak","permalink":"http://blog.garenfeather.cn/tags/leak/"}]},{"title":"Ghost文档翻译——开发模式启动命令对比","slug":"ghost-docs-partly-translation","date":"2018-02-03T15:35:29.000Z","updated":"2018-02-03T16:55:43.249Z","comments":true,"path":"2018/02/03/ghost-docs-partly-translation/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/03/ghost-docs-partly-translation/","excerpt":"原文：working-with-ghost 翻译部分： Day-to-day Development Commands Running Ghost 日常频繁使用的开发命令 运行Ghost Ghost有多种启动方式，每种都各有利弊，这些方式在默认条件下都会从http://localhost:2368./启动Ghost服务","text":"原文：working-with-ghost 翻译部分： Day-to-day Development Commands Running Ghost 日常频繁使用的开发命令 运行Ghost Ghost有多种启动方式，每种都各有利弊，这些方式在默认条件下都会从http://localhost:2368./启动Ghost服务 grunt dev 开发模式下最常见的Ghost启动方式 服务启动时编译构建client文件 监听server文件，有变化自动重启 监听client文件，文件变化时敏捷重建，变化包括文件的实时重载 grunt dev --server 启动时不编译client文件，也不监听其变化，其他与上一条命令 请确保client文件已编译，或者保证其内容为最新（见 grunt build） 在确保你不修改client文件的情况下这样有利于最小化启动时间，保存系统资源 grunt prod 生产模式下启动，启动时编译client文件 既不监听server文件也不监听client文件 相当于以npm start --production命令启动Ghost node index.js 单纯的启动Ghost服务器，不构建client，不监听文件变化也不自动重启服务 当你只想快速启动服务，且不介意手动修改文件要重启服务时适合此命令 不构建client文件 &amp; 可能会导致后台系统一片空白（见 grunt build） Written with StackEdit.","categories":[{"name":"translation","slug":"translation","permalink":"http://blog.garenfeather.cn/categories/translation/"}],"tags":[{"name":"ghost","slug":"ghost","permalink":"http://blog.garenfeather.cn/tags/ghost/"},{"name":"blog","slug":"blog","permalink":"http://blog.garenfeather.cn/tags/blog/"},{"name":"grunt","slug":"grunt","permalink":"http://blog.garenfeather.cn/tags/grunt/"},{"name":"npm","slug":"npm","permalink":"http://blog.garenfeather.cn/tags/npm/"},{"name":"node","slug":"node","permalink":"http://blog.garenfeather.cn/tags/node/"}]},{"title":"开放后端答题（1）——流、自动化、事务、单例","slug":"backend-schedule-01","date":"2018-02-01T03:12:36.000Z","updated":"2018-03-22T21:34:11.899Z","comments":true,"path":"2018/02/01/backend-schedule-01/","link":"","permalink":"http://blog.garenfeather.cn/2018/02/01/backend-schedule-01/","excerpt":"二、开放式问题 解释什么是流(streaming)和如何实现一个流？","text":"二、开放式问题 解释什么是流(streaming)和如何实现一个流？ 解释 这里注意一下这个概念是Stream，而不是Flow，Flow一般常见于网络流（Network Flow）。两者中文翻译都是“流”，但概念不同 根据维基百科，流的一般概念是一个包含资料的序列，理论上具有无限、一个接一个（“个”可以是一个字节，一个bit等各种基本数据单元）的特质，区别于将资料包作一整个来进行处理的输送带 在计算机里是顺序读取或写入的字节序列，能统一描述所有常见输入输出类型的模型，而统一描述之后，相同的程序就可以通过输入输出重定向来处理不同的对象（多态思想）。原本基于分组交换的网络IO在经典的TCP协议设计出来后，大部分也都能用流的模型来描述 能体现出流的经典的几种常见应用概念包括过滤器（filters）、重定向（redirect）管道（pipeline）以及懒加载（lazy loading）等 实现 一个流实现需要包含容器、来源以及数据等 对外暴露接口 在你当前的工作流中，什么事情是你计划下一步需要自动化的？ 我们有一个产品的功能是发送消息，消息发送设置项多且复杂，目前开发过程中都是手动在点击设置发送，频繁重复同样的操作非常浪费时间，希望一个脚本启动就能设置完所有然后发送 初步设想的技术栈是 Python+PhantomJS+Selenium 模拟点击过程，以win下exe的形式运行，如果选项className或idName有规律可以考虑做成命令行形式？ 缺点是根据之前使用的经验selenium控制不好有一定的崩溃几率，暂时不知道解决方式 三、设计模式相关问题 假设你工作的系统不支持事务性，你会如何从头开始实现它？ 事务性本质上可以认为是原子操作的进一步原子封装，因此实现的关键还是在于系统当前拥有的原子操作级别（理论上最基础至少在Linux支持基本C的相关库），需要封装的原子操作级别（例如：参考MySQL的数据库事务级别包括Read Uncommitted、Read Committed、Repeatable Read、Serializable等） 从事务角度来说若要保证最强一致性，当然可以把数据都锁起来，但这样势必会严重影响并发性能。而除了一致性强度要求问题，还有另一个考量是分段锁数据，这就对锁的类型、范围有要求 首先一个最基本的锁单元实现方式：（具体代码见代码小全的锁实现），实现了一个基本的锁模块，就可以针对几种常见事务问题来进一步升级锁（例如：解决脏读，不可重复读，幻读等），参考InnoDB引擎，解决幻读可以使用区间锁，锁住一部分行范围，不允许其中插入新的数据，在此期间，其它冲突事务会被阻塞 涉及重要概念：读、写、计算、一致性、锁、原子操作、数据分段锁 写一个线程安全的单例类 此处使用java代码作为实例 懒汉式（线程安全，低效率） 12345678910public class Singleton &#123; private volatile static Singleton instance; public static synchronized Singleton getInstance() &#123; if(instance == null) &#123; instance = new Singleton(); //这一句并不是一个原子操作，因此需要volatile禁止重排序 &#125; return instance; &#125;&#125; instance = new Singleton();这一句在内存中有一个指令顺序问题*：1.分配内存。2.调用构造函数给instance初始化。3.instance对象指向分配的内存空间。*若顺序为132的话，2之前instance已经非空了但并没有初始化完成，被别的线程抢占，就会直接返回未初始化完成的对象引用导致报错 饿汉式（饥饿，请求前初始化，非懒加载） 1234567public class Singleton &#123; private static final Singleton instance = new Singleton(); private Singleton()&#123;&#125; public static Singleton getInstance() &#123; return instance; &#125;&#125; 双重检验锁 1234567891011public class Singleton &#123; private static Singleton instance; public static Singleton getInstance() &#123; if(instance == null) &#123; synchronized (Singleton.class) &#123; if(instance == null) instance = new Singleton(); &#125; &#125; return instance; &#125;&#125; 静态内部类（懒加载） 12345678910public class Singleton &#123; private static class SingleHolder &#123; private static final SingleHolder instance = new SingleHolder(); &#125; private Singleton()&#123;&#125; public static SingleHolder getInstance() &#123; return SingleHolder.instance; //由于instance是静态内部类的静态成员，虽然是私有的也可以直接访问？ &#125;&#125; 枚举（创建枚举默认就是线程安全的）（最优） 1234public enum EasySingleton&#123; INSTANCE;&#125;EasySingleton.INSTANCE Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"backend","slug":"backend","permalink":"http://blog.garenfeather.cn/tags/backend/"},{"name":"streaming","slug":"streaming","permalink":"http://blog.garenfeather.cn/tags/streaming/"},{"name":"transaction","slug":"transaction","permalink":"http://blog.garenfeather.cn/tags/transaction/"},{"name":"singleton","slug":"singleton","permalink":"http://blog.garenfeather.cn/tags/singleton/"}]},{"title":"利用heroku实现免费的全平台科学上网","slug":"heroku-wall-free","date":"2018-01-25T14:03:23.000Z","updated":"2018-03-15T18:59:25.925Z","comments":true,"path":"2018/01/25/heroku-wall-free/","link":"","permalink":"http://blog.garenfeather.cn/2018/01/25/heroku-wall-free/","excerpt":"一、前言 准备 一台连得上Google的服务器（测试用，可选） 这里用的是腾讯云买的CentOS 7.2，新加坡节点 一个heroku账号 heroku平台注册需要翻墙，但登录和部署均不需要 账号还有免费app余额 一台便宜且容易搞到手的国内服务器（可选） 仅作为中转服务器，不需要多平台共用可以不备 需要梯子服务的平台对应的客户端（Android、Win、Mac、Linux）","text":"一、前言 准备 一台连得上Google的服务器（测试用，可选） 这里用的是腾讯云买的CentOS 7.2，新加坡节点 一个heroku账号 heroku平台注册需要翻墙，但登录和部署均不需要 账号还有免费app余额 一台便宜且容易搞到手的国内服务器（可选） 仅作为中转服务器，不需要多平台共用可以不备 需要梯子服务的平台对应的客户端（Android、Win、Mac、Linux） 二、搭建梯子 国外服务器手动部署测试 首先测试下git上的项目能否正常部署运行服务器程序，这里用的是shadowsocksr，首先登陆服务器 1$ git clone -b manyuser https://github.com/shadowsocksr-backup/shadowsocksr.git 进入到目录，并初始化配置 12$ cd shadowsocksr/$ ./initcfg.sh 根据wiki说明如果是多用户的话接下来修改config.json，单用户的话修改user-config.json，我们这里是单用户，修改user-config.json，其他参数默认，只修改密码。同时这里要记住下面几个参数，与后面客户端保持一致，参数的具体含义见wiki 123456789&#123; \"server_port\": 8388, \"password\": \"12333333\",//你修改的密码 \"method\": \"aes-128-ctr\", \"protocol\": \"auth_aes128_md5\", \"protocol_param\": \"\", \"obfs\": \"tls1.2_ticket_auth_compatible\", \"obfs_param\": \"\"&#125; 修改完毕保存后进入子目录，启动后台进程 12$ cd shadowsocks/$ python server.py -d start 查看日志 1$ tail -f /var/log/shadowsocksr.log 正常输出说明启动成功↓ 123452018-01-24 16:46:42 INFO server.py:46 current process RLIMIT_NOFILE resource: soft 100001 hard 1000022018-01-24 16:46:42 INFO asyncdns.py:324 dns server: [(&apos;100.78.90.8&apos;, 53), (&apos;100.78.90.19&apos;, 53)]2018-01-24 16:46:42 INFO server.py:106 server start with protocol[auth_aes128_md5] password [12333333] method [aes-128-ctr] obfs [tls1.2_ticket_auth_compatible] obfs_param []2018-01-24 16:46:42 INFO server.py:122 starting server at [::]:83882018-01-24 16:46:42 INFO server.py:142 starting server at 0.0.0.0:8388 保持日志窗口观察连接情况 接下来使用客户端，注意要使用shadowsocksR的客户端，原生的shadowsocks客户端不支持协议混淆，无法直接使用shadowsocksR服务端，几个平台的下载也顺便给出来一下，Assets下有最新版稳定版等 Windows Android 苹果选手请自行解决 这里以Windows客户端为例，下载解压后进入目录，启动ShadowsocksR-dotnet.exe，这里用的是4.0版 输入服务器ip，上面修改过的密码，以及协议和混淆等参数与上面保持一致，上面没有修改这里也照默认 保存启动后可以试着登录Google了，访问正常情况下日志会持续输出，如果没有任何输出说明很可能没连上，可以检查一下服务器端口是否开放了（腾讯云、阿里云等服务器默认的安全组都只打开22、443等几个标准端口，需要自行开放设置） 一键部署上heroku（重点） 经过上面的测试我们确认服务程序能正常运行，现在可以着手布置上云平台了，本来还在思考ssr怎么转换成web服务的形式部署上云平台，然后就发现了这个，一键部署，异常简单，跟着下面作者贴图说明服务端很快就能部署好 这里注意一点，这个是shadowsocks-heroku，不是shadowsocksR，协议不同，是不能直接用刚才的ShadowsocksR客户端来连接的，这点作者在issue里面也提到了 接原作者的“启动本地 Client”说明，启动后相当于将本地当成一个代理服务器，要走代理则流量都从本地1080端口走： 1server listening at &#123; address: &apos;127.0.0.1&apos;, family: &apos;IPv4&apos;, port: 1080 &#125; 简而言之，若要浏览器翻墙还得手动给浏览器做配置，如果有多个浏览器要一一配置，需要修改代理服务器时也要一一修改，比较麻烦，而且只能在PC端应用，要应用到移动端需要另装客户端v2ray 总结下我们对这个梯子的需求大概是： 一个梯子，多平台通用 集成到唯一的ShadowsocksR客户端里 全平台通用化（重点） 为了解决上面两个需求我们需要对协议进行转换，这里涉及到一个转换工具glider，可以转换包括socks5、http、ss/ssr内的多种协议，这里我们将socks5转为ssr就可以为客户端所用，glider规则示例说明如下，详细见wiki： 1listen=ss://AES-128-CFB:password@:8449 ↑ 表示监听8449端口，协议为ss混淆，即ssr 1forward=socks5://127.0.0.1:1080 ↑ 表示转发协议为socks5的本地1080端口的流量到监听的端口上 按照原本作者说明的操作整体架构如下，A为本机： .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } A 其他client/代理A ssHerokuReB herokuconnect local 1080connect remote 80websocketsocks5://:1080return datareturn dataA 其他client/代理A ssHerokuReB heroku 我们修改以适应ShadowsocksR客户端的架构如下，A为本机，B为中间服务器： .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } A clientB gliderB ssHerokuReC herokuconnect remote 8449ss://:8449connect remote 80websocketforward 1080 to 8449socks5://:1080return datassr protocolA clientB gliderB ssHerokuReC heroku 架构稍微复杂了点，但实际操作起来难度并不大 首先登入我们的中间服务器，没有服务器的同学直接A机器与B机器用一台也可以，那样就只有局域网内的设备能用了。这里B机器是Linux，因此不能直接用ss-heroku的win客户端，我们在之前项目的issue里找到了作者提供的Linux客户端下载re.zip，下载后解压，进入主目录： 1$ npm install 没有npm与node请自行安装，操作完后修改config.json: 12345678910&#123; \"server\": \"xxxx.herokuapp.com\",//你的app \"local_address\": \"127.0.0.1\", \"scheme\": \"ws\", \"local_port\": 1080, \"remote_port\": 80, \"password\": \"pwd\",//你的密码 \"timeout\": 600, \"method\": \"aes-256-cfb\"&#125; 修改完保存后，运行命令，以后台进程形式运行： 1$ nohup node local.js -c config.json &amp; 退出目录，下载glider的Linux版，解压后进入主目录下的config目录，参照example： 1$ vim glider.conf 12345678listen=:8443listen=ss://AES-128-CFB:password@:8449forward=socks5://127.0.0.1:1080verbose=Truestrategy=rrcheckwebsite=www.microsoft.comcheckduration=30 8443为http/socks5代理端口，8449为ss混淆代理端口，也就是我们等会客户端需要使用的远程端口。保存后退出config目录，运行命令启动后台进程： 1$ nohup ./glider -config config/glider.conf &amp; 启动后可分别查看两个目录的nohup.out查看日志，此时为客户端新添加一个服务器，参数规则照之前一一对应，，协议改为origin，混淆改为plain，保存后使用该服务器代理应该可以正常访问了，日志流水上也可看得到 因为多走了一轮代理的原因，访问的延时会比较大（自测在几百ms左右），因此不适合游戏等对时延要求比较严格情况，简单的试了下youtube视频基本流畅，720p左右体验还行，最大的优势在于免费，不限量，基本不计时 三、扩展思路 相关思考 Shadowsocks-heroku是用websocket代替了原本的socket发起的连接，除了项目的nodejs版之外还有python语言版的链接在项目中可自取 相关用途及扩展 说道代理就自然能想到爬虫，爬虫总怕不小心就被封了ip，而这里heroku平台提供创建50个免费的app，据测试每个app的ip都不同，代理ip什么的自然可以自由的切换。 后端云平台是个很好的思路，除了heroku，应该也还存在其他免费的云平台，我们可以将自己的app部署上去，只要国内能正常访问就说明可以作为代理来使用，大致上找的时候符合以下条件都有可用性： 账户提供一定量免费限额 服务试用不限制时长（免费试用一个月什么的没太大意义） 服务试用不限制流量，限制流量基本难以操作了 paas支持的语言零散不全，他们常支持的Ruby On Rails对国内开发者来说较陌生，因此若要搞出其他Shadowsocks-XX平台 服务端部署项目可能需要自行用ruby等语言重写，较麻烦 有很多地方认识不完整，知识水平有限，抛砖引玉，望大佬们指正。 参考： 使用heroku+shadowsocks-heroku进行科学上网 Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"network","slug":"network","permalink":"http://blog.garenfeather.cn/tags/network/"},{"name":"heroku","slug":"heroku","permalink":"http://blog.garenfeather.cn/tags/heroku/"},{"name":"wall","slug":"wall","permalink":"http://blog.garenfeather.cn/tags/wall/"}]},{"title":"日志：每个软件工程师都应该知道的有关实时数据的统一概念——阅读笔记","slug":"log-you-should-know","date":"2018-01-20T12:21:28.000Z","updated":"2018-03-22T13:59:11.925Z","comments":true,"path":"2018/01/20/log-you-should-know/","link":"","permalink":"http://blog.garenfeather.cn/2018/01/20/log-you-should-know/","excerpt":"日志的用途 实现ACID细节 数据库间复制数据的一种方法 数据库视角：物理日志（记录具体内容）和逻辑日志（记录引起改变的操作） 个人看法：物理日志在空间占用上会优于逻辑日志（以一个值为例，物理日志每一条都是一个数据单位，但要表示对一个数据单位的操作一般来说需要不止一个单位），但相对来说若出错恢复更加不易","text":"日志的用途 实现ACID细节 数据库间复制数据的一种方法 数据库视角：物理日志（记录具体内容）和逻辑日志（记录引起改变的操作） 个人看法：物理日志在空间占用上会优于逻辑日志（以一个值为例，物理日志每一条都是一个数据单位，但要表示对一个数据单位的操作一般来说需要不止一个单位），但相对来说若出错恢复更加不易 状态机复制原理 如果两个相同的、确定性的进程从同一状态开始，并且以相同的顺序获得相同的输入，那么这两个进程将会生成相同的输出，并且结束在相同的状态。 确定性的处理过程就是确定性的 处理和复制方案 示意图 PS：文中叙述的主备模型应用物理日志，而状态机模型应用逻辑日志 日志结构化数据流与消息队列 消息系统中的数据管道设计成日志的样子 个人看法：消息生产消费系统还涉及到更复杂的控制需求如优先级、公平性等，也并不一定是像FIFO一样有时间顺序要求的队列，但一般叙述的日志结构特征重要的一点就是其顺序性？ ELT与数据仓库 ELT：Extraction-Transformation-Loading，数据提取、转换、加载 数据仓库包含了规整的数据，是个批处理查询基础设施 对于数据集中分析和处理，拥有高度集中的位置存放全部数据的规整副本对于数据密集的分析和处理是非常宝贵的资产 把日志用作统一集成机制 数据规整化和转换： 只有针对目标系统的聚合操作才应该加到加载过程中 构建可伸缩的日志 人们普遍认为分布式日志是缓慢的、重量级的抽象 只把它与『元数据』类的使用方式联系在一起，可能用Zookeeper才合适 对于顺序读写可以方便地优化。日志可以把小的读写合成大的高吞吐量的操作 Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"lock","slug":"lock","permalink":"http://blog.garenfeather.cn/tags/lock/"},{"name":"log","slug":"log","permalink":"http://blog.garenfeather.cn/tags/log/"},{"name":"system","slug":"system","permalink":"http://blog.garenfeather.cn/tags/system/"},{"name":"data","slug":"data","permalink":"http://blog.garenfeather.cn/tags/data/"}]},{"title":"Docker添加iptables防火墙规则构建容器间通信","slug":"docker-iptables-containers-conmunication","date":"2018-01-14T21:43:04.000Z","updated":"2018-01-16T14:37:47.210Z","comments":true,"path":"2018/01/15/docker-iptables-containers-conmunication/","link":"","permalink":"http://blog.garenfeather.cn/2018/01/15/docker-iptables-containers-conmunication/","excerpt":"一、坑从何来 最近正好看到解析Docker单主机网络的部分，提到通过link链接容器，于是深入思考了下link的机制，首先如果为容器添加一条链接会发生以下几件事： 描述目标容器的环境变量会被创建 链接的别名和对应目标容器的ip地址会被添加到DNS覆盖列表中 如果跨容器通信被禁止，Docker会添加特定的防火墙规则来允许被链接的容器间的通信。 重点在于第三点，这里Docker添加的防火墙规则是允许两个容器通信到什么地步呢，大概有以下三种猜想：","text":"一、坑从何来 最近正好看到解析Docker单主机网络的部分，提到通过link链接容器，于是深入思考了下link的机制，首先如果为容器添加一条链接会发生以下几件事： 描述目标容器的环境变量会被创建 链接的别名和对应目标容器的ip地址会被添加到DNS覆盖列表中 如果跨容器通信被禁止，Docker会添加特定的防火墙规则来允许被链接的容器间的通信。 重点在于第三点，这里Docker添加的防火墙规则是允许两个容器通信到什么地步呢，大概有以下三种猜想： 两个容器间任意端口自由通信，应该不太可能，达到这种地步接近Joined容器共用同一个网络栈的级别了 容器任意端口都能连上目标容器EXPOSE的端口 容器只有指定的的进程（如pid唯一）、指定的端口号能够连上目标容器EXPOSE的端口，至于这个指定的进程和端口号猜测是在构建的时候指定好并添加到配置中去的？ 最初的猜想是3，因为如果是2的话，容器被非法入侵岂不是可以新开个进程随意连上数据库往外倒数据？（后来仔细想想，容器都被入侵了，跟权限被提到root了有啥区别……当然是为所欲为啊，不过当时没想清楚就是了）这明显不安全。 这里验证最直观可靠的方式还是看iptables的路由规则，开始实验。 二、在踩坑的边缘试探 1.实验环境 Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-63-generic x86_64) Docker version 17.05.0-ce, build 89658be 2.iptables设置 查看当前iptables设置： 1$ iptables -nL 以防万一大家可以先清洗一遍iptables，有配置的同学记得提前备份： 1$ iptables -F 清洗后： 12345678910Chain INPUT (policy ACCEPT)target prot opt source destinationChain FORWARD (policy DROP)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destinationChain DOCKER (0 references)target prot opt source destinationChain DOCKER-ISOLATION (0 references)target prot opt source destination 3.icc、iptables选项与/etc/default/docker icc是跨容器通信开关，iptables则是Docker是否应用防火墙规则的开关，于是修改/etc/default/docker文件，禁止跨容器通信，要求Docker使用iptables规则： 1DOCKER_OPTS=&quot;--icc=false --iptables=true&quot; 同时去掉注释，并重启docker服务： 1$ service docker restart 再次查看当前iptables配置，可以看到docker和docker-isolation都被加入到了chain-forward项中： 1234567891011121314Chain FORWARD (policy DROP)target prot opt source destination DOCKER-ISOLATION all -- 0.0.0.0/0 0.0.0.0/0 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ctstate RELATED,ESTABLISHEDDOCKER all -- 0.0.0.0/0 0.0.0.0/0 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 DROP all -- 0.0.0.0/0 0.0.0.0/0 Chain DOCKER (1 references)target prot opt source destination ACCEPT tcp -- 172.17.0.3 172.17.0.2 tcp dpt:3306ACCEPT tcp -- 172.17.0.2 172.17.0.3 tcp spt:3306Chain DOCKER-ISOLATION (1 references)target prot opt source destination RETURN all -- 0.0.0.0/0 0.0.0.0/0 此处用本机现有的mysql和redis做实验，redis依赖mysql（mysql密码请自行根据自己的配置修改）： 1$ docker run --rm --name mysql -e 3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql 1$ docker run --rm --name redis --link mysql:mysql -d redis 操作完docker ps可以看到两个容器正常运行，但并没有看到iptables有新添加规则。 4.docker network 之前的项目没有涉及到多网络配置，因此对network一无所知，加上无脑瞎找资料没思考清楚，误以为是两个容器不在一个网络内，于是查看默认bridge网络配置： 1$ docker network inspect bridge 部分相关配置如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&#123; &quot;Name&quot;: &quot;bridge&quot;, &quot;Id&quot;: &quot;d14d164b2dbc43b33eb298d79e5928fda258129a02f6c2a7c310633a718d356c&quot;, &quot;Created&quot;: &quot;2018-01-15T03:53:42.133885625+08:00&quot;, &quot;Scope&quot;: &quot;local&quot;, &quot;Driver&quot;: &quot;bridge&quot;, &quot;EnableIPv6&quot;: false, &quot;IPAM&quot;: &#123; &quot;Driver&quot;: &quot;default&quot;, &quot;Options&quot;: null, &quot;Config&quot;: [ &#123; &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;, &quot;Gateway&quot;: &quot;172.17.0.1&quot; &#125; ] &#125;, &quot;Internal&quot;: false, &quot;Attachable&quot;: false, &quot;Ingress&quot;: false, &quot;Containers&quot;: &#123; &quot;5b81e33ddd5e7e79e6c315bd3889812362d19732e0ce9a0486edc98a26c59e77&quot;: &#123; &quot;Name&quot;: &quot;redis&quot;, &quot;EndpointID&quot;: &quot;df2e9dda0de35c4934a50d33bd23cb9d27301cac3882880ba58acf82713956f4&quot;, &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;, &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;, &quot;IPv6Address&quot;: &quot;&quot; &#125;, &quot;fada6a036ecba16bc1c08ec5b8fced59b51144a949d7c1051b78e88d7a4bb35f&quot;: &#123; &quot;Name&quot;: &quot;mysql&quot;, &quot;EndpointID&quot;: &quot;38a5036088b19daa08e212d947b44f3a94e823d9a2cd060d0fbfc19680591abf&quot;, &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;, &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;, &quot;IPv6Address&quot;: &quot;&quot; &#125; &#125;, &quot;Options&quot;: &#123; &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;, &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;, &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;, &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;, &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;, &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot; &#125;, &quot;Labels&quot;: &#123;&#125;&#125; 发现两个容器都在默认网络里。顺便这里有个很迷的地方就是Options里的true和false都是字符串类型，但外面的却不是，后面会提到。观察配置发现icc选项还是true，说明刚才修改的/etc/default/docker文件很可能没起作用。此处有两个选择： 新建一个bridge网络，icc设为false 继续设法修改docker daemon启动选项 其实并没有选择，因为就参数来看只能设置icc，而iptables使用与否必须是docker daemon启动时设置好的。直接百度到的资料杂乱无章，对错参半，于是还是根据官网操作： 新建daemon.json： 1$ vim /etc/docker/daemon.json 输入以下内容 1234&#123; &quot;iptables&quot;: &quot;true&quot;, &quot;icc&quot;: &quot;false&quot;&#125; 并重启dockerd服务，发现会重启失败，显示： 1unable to configure the Docker daemon with file /etc/docker/daemon.json: json: cannot unmarshal string into Go value of type bool 这就是刚才提到的很迷的地方，欺负我们不懂go语言系列，参数改为以下内容： 1234&#123; &quot;iptables&quot;: true, &quot;icc&quot;: false&#125; 保存后再重启docker daemon，再次查看bridge网络，options选项中的com.docker.network.bridge.enable_icc应该为false了，说明配置生效了，此时再按上面步骤启动容器link，可以看到iptables多了两条规则： 1234Chain DOCKER (1 references)target prot opt source destination ACCEPT tcp -- 172.17.0.3 172.17.0.2 tcp dpt:mysqlACCEPT tcp -- 172.17.0.2 172.17.0.3 tcp spt:mysql 操作成功，可以发现两个容器之间互联的是通过forward链的转发规则，具体规则可阅读iptables forward详解。 外面替换一下两个容器的位置，也可以看到同样结果： 12$ docker run --rm --name redis -e 6379 -d redis$ docker run --rm --name mysql --link redis:redis -e MYSQL_ROOT_PASSWORD=123456 -d mysql 端口变成了redis的6379： 1234Chain DOCKER (1 references)target prot opt source destination ACCEPT tcp -- 172.17.0.3 172.17.0.2 tcp dpt:6379ACCEPT tcp -- 172.17.0.2 172.17.0.3 tcp spt:6379 5.结束 验证过程中很多地方没想清楚胡乱操作一通，把原本简单的问题都搞复杂了，动手前深思熟虑还是很重要的啊（俗话说得好，真正写代码的时间能有20%不错了）。 二、后来 1.仔细想想 其实当时还想顺着猜测3的思路深入思考过如果容器被非法入侵，直接攻击代码搞挂了原本的进程，用原本与目标容器3306连接的端口构建数据库的连接该怎么办……那当然是没办法啦啊哈哈哈，你说你家金库的钥匙密码人家都拿到了你的黄金怎么办，那当然是没办法的，重点应该在怎么防止密码和钥匙失窃上吧hhhhh。 而且退一步想，指定能与目标容器3306连接的端口可以办得到，但是绑定到进程上是没有实现的可能的，作为进程标识的pid是会被复用的，重启后pid会变，不可能每次重启进程都重新设定绑定关系，而且也没有设定的基础。 网络基础还是不扎实，很多东西没真正理解。 2.论如何查资料 珍爱生命，少查csdn，多看官方文档，过脑思考比无脑开车撞墙要好 努力改掉下意识避开英文的习惯 写操作指南不指明各种相关版本号的都是***耍流氓*** 基础不牢，地动山摇，我还是太天真了.jpg","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://blog.garenfeather.cn/tags/Docker/"},{"name":"network","slug":"network","permalink":"http://blog.garenfeather.cn/tags/network/"},{"name":"iptables","slug":"iptables","permalink":"http://blog.garenfeather.cn/tags/iptables/"}]},{"title":"进度：开放型后端开发随机聊天话题大全（误）","slug":"backend-questions-schedule","date":"2018-01-12T03:20:35.000Z","updated":"2018-03-22T21:14:01.882Z","comments":true,"path":"2018/01/12/backend-questions-schedule/","link":"","permalink":"http://blog.garenfeather.cn/2018/01/12/backend-questions-schedule/","excerpt":"这是啥 是一系列经典的、开放式的后端开发题目，不是具体的问题，而是以点带面、适合抛砖引玉，再逐步深入考察，源于Github工程↓","text":"这是啥 是一系列经典的、开放式的后端开发题目，不是具体的问题，而是以点带面、适合抛砖引玉，再逐步深入考察，源于Github工程↓ 英文源工程：Back-End Developer Interview Questions 中文翻译（提的pr被merge了开心 ~(≧▽≦)/~）：后端开发面试题 问题分为通用基础、设计、语言等多个方面，这里挑出了我自己感兴趣的部分准备慢慢深入回答，记录进度。强烈推荐各位后端开发同学们也来思考一波，来啊学习啊快活啊答完你就成仙了 列表（完成度：10.5/69） 语言设计中空引用(null reference)的存在有什么问题？将空引用从编程语言中移除可能导致什么结果？ 什么是实时系统？它与普通系统有什么区别？ 实时语言(real-time language)和堆内存分配(heap memory allocation)之间的关系是什么？ 如果你需要使用缓存，你使用哪些原则来确定缓存大小？ 在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你如何权衡？ 如何在一个不可靠的协议之上构建一个可靠的通信协议？ 解释什么是流(streaming)和如何实现一个流？ 解释 实现 在你当前的工作流中，什么事情是你计划下一步需要自动化的？ 当你在浏览器输入google.com时发生了什么(age old question)？ 当操作系统CPU处于空闲的时候，它可能在处理哪些事情？ 如何向一个五岁的孩子解释什么是Unicode/数据库事务？ 一个“专业的开发者”意味着什么？ “喜欢这个的人也喜欢……”，如何在一个电子商务店里实现这种功能？ 假设你工作的系统不支持事务性，你会如何从头开始实现它？ Active-Record模式有什么限制和缺陷？ 写一个线程安全的单例类 你是如何处理Dependency Hell的？ 内聚和耦合的区别是什么？ 在存储过程（Stored Procedures）中写业务逻辑有什么优缺点？ 告诉我你的首选语言的三个最坏的缺陷 闭包是什么？它有什么用途？闭包和类有什么共同点？ 用一个例子说明匿名函数是有用的 命名空间有什么用？有什么可以替代他的吗？ 谈谈JAVA和C#的互操作性？（或者任选其他两门语言） 你认为好的语言好在哪里？坏的语言坏在哪里？ 什么是栈？什么是堆？ 为什么 SELECT * FROM table WHERE field = null 不能匹配空字段？ 延迟加载（lazy loading）是如何实现的？什么场景下有用？他有什么缺陷 如何找出应用中开销最大的查询？ 什么是N+1问题？ NoSQL是如何解决可伸缩性挑战的？ 什么情况下你会使用类似于MongoDB的文档数据库而不是关系型数据库 分布式版本控制系统，相比集中式版本控制系统有哪些优势和劣势？ 能描述下什么是GitHubFlow和GitFlow工作流吗？ 什么是rebase？ 为什么我们需要并发呢？解释一下 为什么测试多线程/并发代码这么困难？ 什么是竞争条件（Race Condition）？用任何语言写一个例子？ 什么是死锁？用代码解释一下？ 什么是饿死？ 什么是Wait-Free算法？ 怎么测试一个分布式系统 什么场景下你会在两个系统中采用异步通信机制？ 远程调用的通用缺点是什么？ Web应用中如何管理容错性？在桌面端呢？ 让我们来谈谈网络分裂（network partitions）后的几种恢复手段吧？ 你在什么时候会使用Request/Response模式，什么时候会使用Publish/Subscribe模式？ 只用LIFO栈如何构造一个FIFO队列？只用FIFO队列如何构造一个LIFO栈？ 写一段有栈溢出的代码 写一个生成随机迷宫的程序 写一段有内存泄漏的示例代码 写一个简单的垃圾回收系统 写一个基础的Web服务器，然后画一张线路图，展示你将来还想要实现的功能 如何对一个10GB的文件进行排序？如果是10TB的数据，你会采用什么方法？ 请事先rnd()函数 什么情况下缓存是没用的，甚至是危险的？ 横向扩展（scale out）vs 纵向扩展（scale up）:有什么区别？分别在什么场景下使用？ 分布式系统中如何处理“故障切换（failover）”和“用户会话（user session）”？ 如果让你来设计一个去中心化的P2P系统，你会如何设计？ 为什么CGI的扩展性不好？ 在可扩展性上，发布/订阅（Publish/Subscribe）模式有什么缺点？ 除了恶意攻击造成的拒绝服务现象以外，哪些设计或者架构上的问题会导致拒绝服务？ 一个系统要有什么特征才能适配云计算环境？ 什么是双因素认证（Two Factor Authentication）？ 在一个已有的Web应用中，你如何实现这种机制？ 这段JavaScript函数的输出是什么？ 你能指出哪儿有内存泄漏吗？ 如何重构这段代码？ Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"backend","slug":"backend","permalink":"http://blog.garenfeather.cn/tags/backend/"},{"name":"schedule","slug":"schedule","permalink":"http://blog.garenfeather.cn/tags/schedule/"}]},{"title":"非阻塞I/O详解——翻译（1.26更新未完）","slug":"nonblocking-io-translation","date":"2018-01-03T07:21:28.000Z","updated":"2018-03-22T14:09:35.923Z","comments":true,"path":"2018/01/03/nonblocking-io-translation/","link":"","permalink":"http://blog.garenfeather.cn/2018/01/03/nonblocking-io-translation/","excerpt":"非阻塞I/O详解——翻译 标签（空格分隔）： 非阻塞 IO Author: Cindy Sridharan Time: Oct 25, 2017 Original: Nonblocking I/O","text":"非阻塞I/O详解——翻译 标签（空格分隔）： 非阻塞 IO Author: Cindy Sridharan Time: Oct 25, 2017 Original: Nonblocking I/O 非阻塞I/O 描述符究竟是什么 Unix中所有的I/O的基础构建模块都是一个字节序列。而大多数程序甚至运行在更简单的抽象层次————一个字节流或I/O流上。 进程通过描述符来引用若干个I/O流，描述符又被人们熟知为文件描述符。而管道、文件、FIFO队列、POSIX的IPC机制（消息队列、信号量、共享内存）以及事件队列等都是通过描述符引用I/O流的实例。 描述符或是由诸如open、pipe、socket等系统调用显式创建，或是从父进程处继承。在以下情形描述符会被释放： 进程退出 close系统函数被调用 被标记为close on exec的情况下，在函数exec调用后隐式释放 这里注意close on exec————一个进程分叉时，它所有的描述符都会“复制”到子进程中去。如果描述符中有哪一个被标记为close on exec，那么在父进程调用fork之后而子进程执行exec之前，子进程中被标记为close on exec的描述符会被关闭，变为不可用状态 数据转换过程的发生实际上就是是read或write的系统函数被调用 每个描述符指向一个数据结构，称为内核中的文件条目（file entry），该结构以字节为单位维护一个文件偏移量（file offset），从文件条目对象的开头开始。open系统调用创建一个新的文件条目，其中包含了每单个描述符的文件偏移量。 编辑：fork系统调用致使描述符在父子进程间共享（引用语义上的）。所以父子进程实际上使用同一个描述符，在文件条目中引用同一个偏移量。dup/dup2也使用同样的语义来复制一个文件描述符 在Slack的dist-sys里可见的C示例代码确认了这一点 123456789101112#include &lt;unistd.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;int main(char *argv[]) &#123; int fd = open(\"abc.txt\", O_WRONLY | O_CREAT | O_TRUNC, 0666); fork(); write(fd, \"xyz\", 3); printf(\"%ld\\n\", lseek(fd, 0, SEEK_CUR)); close(fd); return 0;&#125; 运行结果： 1236 更有趣的是在描述符被共享的情况下close on exec标志位所做的事。我的猜测是如果该标志位的设置会将这一描述符从子进程描述符表中移除，以至于父进程可以继续使用，而子进程在exec执行之后则无法使用该描述符 因为多个描述符可能会引用同一个文件条目，文件条目的数据结构中为每个描述符维护着相应的偏移量。Read和Write的调用操作从该偏移量处开始执行，偏移量本身也在每次数据转换后更新自身值。偏移量决定了下一个读或写操作从文件条目的什么位置开始。进程 非阻塞描述符 条件触发 边缘触发 描述符的多路I/O 非阻塞型I/O 信号驱动型I/O 轮询型I/O BSD专用内核事件轮询型I/O（kevent系统调用） 非阻塞型I/O 描述符发生了什么 进程发生了什么 内核发生了什么 缺陷是什么 频繁查询确认： 非频繁查询确认： 什么情况下适用？ 信号驱动型I/O 描述符发生了什么 进程发生了什么 内核发生了什么 缺陷是什么 什么情况下适用？ 轮询型I/O 描述符发生了什么 进程发生了什么 内核发生了什么 缺陷是什么 什么情况下适用？ BSD内核事件轮询型I/O 描述符发生了什么 进程发生了什么 内核发生了什么 缺陷是什么 什么情况下适用？ POSIX异步I/O 在Linux上，执行并行I/O的另一种方法是使用依赖于glibc的基于多线程实现 These functions are part of the library with realtime functions named librt. They are not actually part of the libc binary. The implementation of these functions can be done using support in the kernel (if available) or using an implementation based on threads at user level. In the latter case it might be necessary to link applications with the thread library libpthread in addition to librt. 当然，这种方式也不是没有缺点的： This has a number of limitations, most notably that maintaining multiple threads to perform I/O operations is expensive and scales poorly. Work has been in progress for some time on a kernel state-machine-based implementation of asynchronous I/O (see io_submit, io_setup, io_cancel, io_destroy, io_getevents), but this implementation hasn’t yet matured to the point where the POSIX AIO implementation can be completely reimplemented using the kernel system calls. 在FreeBSD上，POSIX AIO 通过aio系统调用实现。队列中的I/O操作会由一个异步的“内核进程”（又被称为“内核I/O守护进程”或“AIO守护进程”）来执行。多个AIO守护进程被分到一系列可配置池里。每个池子会根据负载情况增加或移除AIO守护进程。其中一个AIO守护进程池被用于为socket们的异步I/O请求提供服务，另一个则用于服务除对原始磁盘的异步I/O请求以外的全部异步I/O请求 执行一个异步I/O操作过程是这样的： 内核创建一个异步I/O请求结构，结构内包含执行所需相关信息 如果内核缓冲区无法立即容纳请求的资源，该请求结构会进入队列中 如果请求创建时，AIO守护进程不可用，请求结构会进入队列等待进程和系统调用返回 下一个可用的AIO守护进程使用内核的同步路径来处理该请求 守护进程完成I/O后，请求结构被标记为完成，并返回相应结果或错误码 如果I/O操作完成，进程使用aio_error系统调用来轮询，这个是调用通过检查之前内核创建的异步I/O请求结构状态来实现的 如果进程运行到了I/O不完成就无法继续的地方，它可以调用aio_suspend等待直到I/O完成 进程会在AIO请求结构处被投入睡眠，当I/O操作完成时进程会被唤醒，或进程本身设置了当I/O操作完成时发送一个信号给自己中断唤醒 当标识I/O操作完成的aio_suspend、aio_error返回或中断信号到达时，使用aio_return系统调用来获得其返回结果 Written with StackEdit.","categories":[{"name":"translation","slug":"translation","permalink":"http://blog.garenfeather.cn/categories/translation/"}],"tags":[{"name":"network","slug":"network","permalink":"http://blog.garenfeather.cn/tags/network/"},{"name":"nonblocking","slug":"nonblocking","permalink":"http://blog.garenfeather.cn/tags/nonblocking/"},{"name":"asynchrounous","slug":"asynchrounous","permalink":"http://blog.garenfeather.cn/tags/asynchrounous/"},{"name":"synchrounous","slug":"synchrounous","permalink":"http://blog.garenfeather.cn/tags/synchrounous/"}]},{"title":"分布式锁机制及几种方案对比","slug":"distributed-lock-related-work","date":"2017-11-24T05:51:54.000Z","updated":"2018-02-03T16:56:10.956Z","comments":true,"path":"2017/11/24/distributed-lock-related-work/","link":"","permalink":"http://blog.garenfeather.cn/2017/11/24/distributed-lock-related-work/","excerpt":"原文：分布式锁那些事 本文是在原文基础上用自己的语言试着更简洁的转述一遍，类似提纲，加入自己的小理解，和少部分扩展思考，内容基本为原文 分布式锁机制及几种方案对比","text":"原文：分布式锁那些事 本文是在原文基础上用自己的语言试着更简洁的转述一遍，类似提纲，加入自己的小理解，和少部分扩展思考，内容基本为原文 分布式锁机制及几种方案对比 为什么需要分布式锁 保证同一方法同一时间只有一个线程执行 单机性能有限，服务由单体部署拆分成分布式部署 需要跨进程，跨机，跨数据中心一致性方案(单进程内各语言或自身有锁方案，或配合架构有特定的组件集成) 分布式锁要求 同一时刻一个方法只能有一个进程的一个线程执行 高可用 高性能 锁失效方案 支持阻塞锁，获取锁失败可以继续尝试获取 支持非阻塞锁，获取失败立刻返回 分布式锁的三种方案分析 数据库方案 操作 数据库建表，在方法名上创建唯一索引 在表中插入方法名，执行者等的一条数据，插入成功获取锁 优势 借助数据库，结构简单 不足 受限数据库性能(可能要求多机部署，主备复制，数据同步等) 没有锁失效方案 不可重入 没有阻塞锁方案，需要自行循环 Redis方案 操作(2.6.12版之前) setnx设置key-value expire设置过期时间 del释放 问题及对应解决方案 每一步的操作都要保证原子性，set完没来得及设expire会导致死锁(2.6.12版实现了将两个操作合并原子化操作) 分布式环境下，A获取锁后阻塞，锁过期被B获取，A恢复后执行完错误释放了此时属于B的锁(经典CAS算法解决被误释放问题，但原本线程操作未完就失去锁的问题并没解决) 高可用要求主从复制机制，而主从复制多为异步，会出现数据不一致(不主从复制，用RedLock算法，该算法的成熟开源实现即Redisson，此处并不明白该算法如何解决主从复制的问题) 整体优势：借助Redis，实现方便 问题：超时作为锁失效机制不可靠，若处理时间过长会在完成前失去锁 Zookeeper方案 结构：内部分层文件系统目录树 操作 (原文有不清晰之处，待日后补充) 优点 高可用 可重入 阻塞锁 解决锁失效 缺点：频繁插入删除性能会比Redis差一些 其他 Redlock算法 大致思想为布置多个Redis Master节点，挨个申请锁，获取多数则成功，少数则在所有节点上解锁？ Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"distributed","slug":"distributed","permalink":"http://blog.garenfeather.cn/tags/distributed/"},{"name":"lock","slug":"lock","permalink":"http://blog.garenfeather.cn/tags/lock/"},{"name":"redis","slug":"redis","permalink":"http://blog.garenfeather.cn/tags/redis/"},{"name":"zookeeper","slug":"zookeeper","permalink":"http://blog.garenfeather.cn/tags/zookeeper/"},{"name":"database","slug":"database","permalink":"http://blog.garenfeather.cn/tags/database/"}]},{"title":"【Philosophical Dilemmas】上帝、永生与信仰","slug":"philosophical-dilemmas-1","date":"2017-10-24T12:24:44.000Z","updated":"2018-01-31T12:28:43.712Z","comments":true,"path":"2017/10/24/philosophical-dilemmas-1/","link":"","permalink":"http://blog.garenfeather.cn/2017/10/24/philosophical-dilemmas-1/","excerpt":"前言：首先，这是《Philosophical Dilemmas》第三版中译本《没有标准答案的哲学问题》的读书笔记~~（阅读理解/课后习题/这次语文月考又挂了哎）~~，全书共五章，每章约7个问题，回答包含两到三个立场，都是根本性的问题，难以回答，但还是试着做出选择并给出自己的理由，必然存在前后矛盾，尽力逻辑自洽。全部大概分成五次发，欢迎讨论，求指正。 一、上帝、永生与信仰 1 上帝存在吗","text":"前言：首先，这是《Philosophical Dilemmas》第三版中译本《没有标准答案的哲学问题》的读书笔记~~（阅读理解/课后习题/这次语文月考又挂了哎）~~，全书共五章，每章约7个问题，回答包含两到三个立场，都是根本性的问题，难以回答，但还是试着做出选择并给出自己的理由，必然存在前后矛盾，尽力逻辑自洽。全部大概分成五次发，欢迎讨论，求指正。 一、上帝、永生与信仰 1 上帝存在吗 是：因果论有神论者 否定特性与否定特征近义，描述事物具有否定特性/征无法告诉我们事物具体究竟是如何的，只能排除事物具有某种特征的可能性，无法定义事物所需要被描述的特性。(例：不是树的植物) 不能，可以，因为思考不一定要有结果，人的想象能力也会变化。 不可以，因为想象和思考都是个人的行为，受限于个人的认知能力，若以现阶段社会主流的基本定义来说是不存在的(90°直角与圆边冲突) 不会，会 不能，事实一和事实二冲突 是：智慧有神论者 因为机器的各个部分一定是通过某种特定方式有计划地组合在一起，而不是随意地拼在一起。如果是机器，一定是由一个智能的设计师创造出来的，这个英明、具有力量的设计师只能是上帝。 机器不会偶然出现—&gt;机器有设计师 世界秩序井然—&gt;世界不是垃圾堆，更像一台机器，且比机器更复杂精确—&gt;世界不会偶然自己诞生—世界有设计师—设计师比我们更有能耐是上帝—上帝存在 不可以，因为他首先证明了世界具有机器的基本特征，证明了有&quot;设计师&quot;的存在，间接证明的是设计师比我们更强大更有智慧，即上帝。 世界与机器一样存在一定的因果关系。 因为没有一台机器是偶然产生的，如果世界是偶然产生的，是&quot;进化&quot;而来的，那我们会看到机器可以通过&quot;进化&quot;而自行长大。而且偶然结合的过程无法解释人类这样复杂的生物是如何形成的。 都会的 不：无神论者 原始部落到古希腊的进化 神灵都退到奥林匹斯处，而且数量大大减少 神的概念出现在神教中，他指导但不甘于历史，上帝减少以凡人形象式出现，人们需要劳驾上帝解释的东西变少，宗教信仰的根基动摇 是的，我认为 上帝概念变化方式 上帝的概念离人物事务更远，很少参与和干预人间的事务 不再相信人类的智慧是上帝本性的副本，不相信上帝会展现出嫉妒、愤怒和同情的特点 对人自己的形象从相信是上帝设计的人体和人脑转变为相信自然选择过程，就像其他物种一样没有人能给人类描绘一个原始的蓝图。对上帝的概念脱离人类的形象，即不再相信人类的智慧是上帝的副本 相信上帝同时相信与人类没有相同/把星系或热能称为上帝 我认为不可能，因为上帝的形象本就是基于比人类更全能的高等形象，即其本质上还是脱胎于人类，无法与人类的形象完全脱离关系 我认为不能，星系或热能都是物理学范畴的概念，上帝更多的是宗教概念，难以混为一谈 可能，因为本就没有理由相信上帝本善 1选择：无神论者 2 上帝像人一样吗 不：抽象主义者 会。他是一个智慧慈祥的老人，白须长而密，沐浴在耀眼的白光中，手握权杖，身披锦袍。 不认为，我认为这取决于孩子个人的成长环境与成长经历。 与单纯的物理意义不同，上帝象征着一种形象，在每个人想象中不同的形象，这些形象有一些共通的特征，传达一些共通的精神。上帝这个概念更倾向于一个精神概念。 不能。如果是发自本心的爱，其指向本身并没有对错，而道德更多是人为的标准，本质上与爱并无直接关联。若男人真心爱女同事也当面对本心(与妻子的契约解除与否，忠诚背叛则是另一回事)，女人若真爱她的工作追求目标也无可厚非，爱指导他们的追逐。 一般来说需要研究构造，即事物AB组成成分是否相同，组成结构是否相同。外在需要证明闪电与电具有相同的特征、性质，内在证明两者由同样物质构成。 上帝未必与我们同在，针对文中提到的，母亲可能抛弃孩子，厨房里的工作者可能因为恶念下毒，病房中的护士也可能毫无耐心。被抛弃的孩子、被毒死的客人、得不到护理的患者有理由相信上帝和爱都不与他们同在。 人们实现了愿望会相信上帝能听到他们的祈祷，但更多的人更多的愿望不会被实现。 是：人格主义者 一种生理假设：人们努力实现自我意识，把自己投射到环境之中然后读到投射结果，以此来认识自我。 因为他认为宗教会阻止人们充分挖掘自己的潜能。 因为他们希望上帝存在。 (对多神教缺乏了解只好口胡了) 粗略的来看可能适合，以北欧神话体系为例，其本身还是父权体系，而此处提到的佛洛依德理论核心是父亲形象，因此也许合适？ 鬼知道那是什么东西 因为上帝存在与否与普遍认同的上帝形象之间并没有必然联系，有可能人类确实将自身形象投射到上帝形象上而存在的上帝确实也是人的形象，投射论本身不涉及客观的论据，本身并不证明什么。 不知道。 本文认为相信事物的存在只是因为只是因为希望它存在是非理性的。并不认为是非理性的，人格主义者认为无法充分证明信奉上帝是非理性的。 1选择：人格主义者 3 上帝允许无辜的苦难吗 反对者 人为恶与自然恶 上帝想消除恶也能消除恶 两个对立面是：①上帝是全能而仁慈的，他爱它所创造的一切，如果这样，怎么会发生这么多恶?②不能消除恶的存在不是全能的，不想消除恶的存在不是仁慈的，因此就不是上帝了 因为综合上帝的两个重要特征，如果上帝存在必然不会有恶发生，而实际上因为有恶的发生，就没有一种仁慈而全能的事物。 首先除了人类造的恶外还有其他的恶不归人类负责。例如地震带来巨大灾难，但与自由意志无关；其次如果是人类恶，上帝如果全知，在创造时就能预料到给人类自由，人类会在世界上作恶，但它还是创造了我们，上帝该为这后果负责。 他会要人们为了天堂中的幸福忍辱负重，承受现实生活的苦难。是的，因为不然无法理解承受恶的我们便无法信仰上帝。 调和者 这个世界没被消除的苦难与上帝全知仁慈形象之间的冲突 本文认为人需要经历长时间的艰苦磨难才能形成真正的品德，品德是人生经历的产物。个人认为此文并没有正面解答这个问题 这个错误是他们抱怨这个世界的痛苦和苦难，似乎他们能把这些苦难都消除掉，他们只看到了事情的表面，没看出痛苦是生活必不可少的一部分 不赞同，个人而言更愿意生活在现在这个世界，可是每个人最适合的世界并不一样。不是所有人都该面对所谓苦难的机会，而且苦难并不是一种给所有人机会的东西，天灾一类的苦难比起给人机会更多的是直接剥夺了人的生命或选择的机会，剥夺了一些人的创意和力量。林肯的人性散发着光辉，但被疾病夺去性命的是他的小儿子而不是他，战争死去的是他的国民也不是他。 是指苦难即人性的考验，考验人的品德、对上帝的忠诚一类的存在。有区别，考验说假定上帝多疑残忍，假定接受考验前人就已经有了品德这一特性，调和者说否定两者；调和者还认为痛苦只是一个机会，一种可能性，而非具有测验性质的、更多是被刻意制造的考验这种存在。 不认为，不相容。 1选择：反对者 4 灵魂是不朽的吗 不：死亡论者 因为他们认为可以想象死后这个世界的样子，想象人群、季节、变化、日常活动，在脑海里描绘这些情景就像看着它们发生。然而事实是人没有肉体就没有五官、感觉，从想象上看与世界不会有任何互动 因为他的肉体被埋葬，而没有肉体也就没有感觉，无法与世界产生互动 同意，基于世上大多数人都认同自己肉体性别这一认知基础。不同性别社会对他们有不同的要求和期待，因此进一步影响个性的形成。 死亡论者认为人们能够想象没有肉体的存在，进而想象与自己无关的继续运转的世界，即你受限于肉体，与世界间无互动，而无互动即没有真正待在这个世界里 不能证明，薛定谔的猫定律，我想象不出两种状态共存于一个盒子且在盒子打开的那一瞬间决定最终状态 没有 是：存活论者 他们的一依据是历史上有很多人声称他们看到钢丝去的鬼影或曾与死人堆话等，我认为基本理性，因为若是真的则是基于证据报告的看法，当然前提是报告足够可靠 全面彻底的检测他们的生平，排除一切预先了解或推断出结果的可能性，确定相关情报只有死人才掌握 因为无法解释病人为什么知道其他房间发生的事情 我认为理论上第二种最可信（在极其彻底的排查手段被应用的前提条件下） 按照此文观点，反对&quot;死后生命说&quot;的证据是肉体影响大脑的，而有证据表明大脑也可以影响肉体，两者相互中和 不适用，因为反对观点证据有效的基础是该观点认为生命基于肉体，但支持&quot;死后生命说&quot;的观点并没有证明死后生命的基础与大脑有关，而且按照常规思路来看，大脑也可以是肉体的一部分，中和没有实际意义。 小想法A： 1标题与论证内容有一定的差异？（如死后生命可以存在一段时间后再消逝？） ，灵魂存在但未必不朽等。 小想法B： 1这两篇的论证都有局限，存活论说服力不大，死亡论过于倾向于主观认知（即无法想象/未被认知的事物不存在） 小想法C： 1还有一个硬伤是先入为主的认为死后生命形式与生前别无二致，从而才得出结论认为无法与世界互动，但事实上若有死后生命，其形式应该是未知的（存活论中提到这点），获取信息的手段也是未知的 小想法D： 1例如以死后人以某种类似电磁波集合体的形式存在？电磁信号理论上能携带事务的所有信息（基于01信号的观点），但进一步猜测这种存在很快会消散，因此灵魂未必不朽 5 信仰是一个答案吗 是：宗教信仰者 我们对世界和人类的了解甚少，免疫系统远比我们意识到的要复杂、微妙 用不同的方式思考死亡，科学研究后发现&quot;没有人知道为什么会发生死亡&quot;，必须面对肉体崩溃的局限，无法理解强烈求生意志的含义等。这使他变得谦卑，发现更多的局限性 死亡、起源、社会、感觉相关的终极问题。我不认为，我认为有人能理解而不为我们所知，或人类只是还没到那个阶段。 不同意 作者本身直言不需要论据和论证，只是因为自己想相信，即不接受反驳的意思，某种程度上是对的，对个体而言信仰确实可以不接受反驳，谈不上对错，但无法使他人信服，而如果试图讨论一些&quot;共同&quot;的东西，使人信服是有必要的 他不认为，他只是寻求一个能解答所有这些问题的回答，这个信念为所有其他问题提供了答案 不应该。也不应该，治疗方式无论如何应当有一定的理论实践基础 不：宗教质疑者 信仰可以是一种相对可能性的合理推论，如果有事实和客观依据。说某种信仰有证据就等于是说有些公认的事实可以让这种信仰更为可信，比如服用某种药物的十个病人中有九人的病治愈了，而没服药的没治愈，就表明这种药可能对类似的病更容易痊愈，这是证据。 一是因为被权威人士要求去信奉的，二是因为这会让人们感觉好受一些。 人们会永远学不会独立思考，而习惯了相信权威这种思维方式后人们也会在其他领域使用这种思维方式。 我认为不会，首先我没有信奉的宗教，而且相信权威人物也是建立在自行思考和对权威人物的观点思考后的结果，错了也只会指责相信错误的自己而非错误的权威。不能，科学权威的观点也需要经过我们个人的思考、逻辑判断和论证。 在关于种族和性别的优势上研究结果不明确时，我们会因为某个信念能让我们感到非常舒服而去相信他，这偏见本身就是严重的歧视。 主要分歧在持有信仰的理由上，信仰者认为不需要证据，而质疑者认为这样一厢情愿的依据信仰形式不对，应当有证据支撑。质疑者应当不会。 1选择：宗教质疑者 6 想要过有意义的生活，必须信仰上帝吗？ 意义型有神论者(生活的意义是服从上帝) 一个人不能自己决定某些价值让人生有意义，如同一个人不能让一个词语只对他一个人有意义。一个人不能创造个人私有的语言，也不能创造我们自己私有的价值观。 因为他认为一个人所追求的人生目标应该是有价值的，而不是随便什么目标都可以。这个人的人生与有个&quot;有意义人生&quot;的概念不相符，像这种微不足道的目标没有价值。我同意。 能，能。 因为他们无法正常的认识现实世界，他们的人生没有致力于有客观价值的某件事情，而是基于自己的幻想。论者认为幸福必须基于现实，他们并没有基于现实，因此目标也不具有客观价值。 会，因为他认为所有宗教都同意神灵是善良的、智慧的、乐于助人的、公平的。 有的。 存在主义者 (终极意义的神话) 在学校学习可以达到一个水平，这个水平可以带来更好的工作，得到一个更好的工作，得到一个更好的工作是有意义的。但海边度假不会导向任何目的，只是娱乐，不能导向就没有意义。 论者认为这和躺在海边的沙滩上一样是没有意义的。 我们很难了解上帝的规则，即使了解，也很难遵从。 有，有，能。滑雪者的意义很简单，假如他十年如一日的滑雪打破了某项滑雪世界纪录，想必就不会有人质疑其意义了，而且感受刺激，挑战人类极限本身也属于公认有意义的事情。 本质上是因为他以自己对生活方式的标准来定义幸福与最好，他们俩的行为都不符合他的价值观。 是的，呼吸吃饭不是我最终的人生目标。是我有意识自觉作出的选择。 1选择：存在主义者 7 佛教是一种哲学吗 是：佛教徒 相信，可能，因为肉体的变化确实不受我们大脑思想直接控制(不能我希望身体健康就健康，只能间接通过饮食运动等来控制)。 因为人性欲望与现实固有本质之间产生了冲突 不。佛教不鼓励人们服从权威或信仰，当然也不鼓励人们信奉什么，而觉悟来自一个人自己的努力，不是来自信仰、恩赐或权威。 不是，我认为信仰神灵确实是基本条件。 觉悟要求理解自己和世界，理解后改变自己的情感行为，某种意义上可以说是自己对自己的拯救，而宗教概念的救赎多是指神灵对死后生命的拯救。获得救赎的主要障碍是原罪和作恶，而觉悟的主要阻力是无知和错觉。 因为更重要的是要理解基本事实，而不是担心无关紧要的细节。 不：专家 宗教和哲学相似的方式 都关心上帝、神灵和信仰等有关的问题，都思考肉体与大脑之间的关系、对与错、最好的生活方式、信仰及信仰的理由等问题 对一些思想著作都非常认真的研读，彼此的组织都接纳有相同思想的人分享彼此的观点 区别在态度上，宗教笃信、依靠崇拜和赞美，始于敬畏、爱、谦卑和恐惧等强烈情感，而哲学建立在批判基础上，要求怀疑、质疑和慎思，注重尽可能清晰地思考与论证，不为个人感情所左右 有的，第一点最重要，是其他三点的根基 没有，仅提供了证明各点内容的例证 不会，因为对宗教本质的认识需要长时间的研究、了解和渗透，几次活动远远不够，且无神论群众不会轻易拥有被弃置多年的信仰 我同意，因为人可以在面对不同事物时用不同的态度，对此人可以意识到两者的区别并有意识分开对待，再者人的思考中本身内在冲突就不少（所谓双重标准） 1选择：不是","categories":[{"name":"reading","slug":"reading","permalink":"http://blog.garenfeather.cn/categories/reading/"}],"tags":[{"name":"Philosophical Dilemmas","slug":"Philosophical-Dilemmas","permalink":"http://blog.garenfeather.cn/tags/Philosophical-Dilemmas/"},{"name":"philosophy","slug":"philosophy","permalink":"http://blog.garenfeather.cn/tags/philosophy/"},{"name":"god","slug":"god","permalink":"http://blog.garenfeather.cn/tags/god/"},{"name":"life","slug":"life","permalink":"http://blog.garenfeather.cn/tags/life/"},{"name":"belief","slug":"belief","permalink":"http://blog.garenfeather.cn/tags/belief/"}]},{"title":"WEB后端发展历史总结","slug":"backend-history-all","date":"2017-09-16T12:14:48.000Z","updated":"2018-03-22T22:03:45.962Z","comments":true,"path":"2017/09/16/backend-history-all/","link":"","permalink":"http://blog.garenfeather.cn/2017/09/16/backend-history-all/","excerpt":"非原创，是对知乎某个回答的梳理 把复杂的逻辑控制、等待、资源竞争变成人可以理解的行为是生产力的进步","text":"非原创，是对知乎某个回答的梳理 把复杂的逻辑控制、等待、资源竞争变成人可以理解的行为是生产力的进步 成本曲线和研发曲线交替上升 2003-2008（Web2.0时代） nginx爆发式增长（nginx） Event Loop具象化 memcached解救数据库（缓存） git革命开发流程（协同工程化） 2006-2011 传统多进程、多线程 =&gt; coroutine（协程） 本质：用户态 任务切换行为 意义：不改代码前提提高了吞吐， 或提供原生轻量并发 同步写异步 EventLoop库：libev、libevent等 node js 前后端分界模糊 前端领域革命~~（新时代的撕逼）~~ redis（带有复杂数据结构的memcached） 工程领域抽象 SaaS（Software-as-a-Service）：抽象软件服务 PaaS（Platform-as-a-Service）：抽象基础设施/平台 IaaS（Infrastructure-as-a-Service）：抽象硬件 《人人都是架构师》 2012-2017（移动时代） 迭代高速化 开发边界模糊 数据实用化 重视数据 Hadoop全家桶 传统数据库升华 tidb ocean base 内核创新 bbr bpdk 虚拟化挑战 内核层面解决隔离和性能的问题 项目扁平化 .mermaid .label{font-family:trebuchet ms,verdana,arial;color:#333}.node circle,.node ellipse,.node polygon,.node rect{fill:#cde498;stroke:#13540c;stroke-width:1px}.node.clickable{cursor:pointer}.arrowheadPath{fill:green}.edgePath .path{stroke:green;stroke-width:1.5px}.edgeLabel{background-color:#e8e8e8}.cluster rect{fill:#cdffb2!important;rx:4!important;stroke:#6eaa49!important;stroke-width:1px!important}.cluster text{fill:#333}.actor{stroke:#13540c;fill:#cde498}text.actor{fill:#000;stroke:none}.actor-line{stroke:grey}.messageLine0{marker-end:\"url(#arrowhead)\"}.messageLine0,.messageLine1{stroke-width:1.5;stroke-dasharray:\"2 2\";stroke:#333}#arrowhead{fill:#333}#crosshead path{fill:#333!important;stroke:#333!important}.messageText{fill:#333;stroke:none}.labelBox{stroke:#326932;fill:#cde498}.labelText,.loopText{fill:#000;stroke:none}.loopLine{stroke-width:2;stroke-dasharray:\"2 2\";marker-end:\"url(#arrowhead)\";stroke:#326932}.note{stroke:#6eaa49;fill:#fff5ad}.noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}.section{stroke:none;opacity:.2}.section0,.section2{fill:#6eaa49}.section1,.section3{fill:#fff;opacity:.2}.sectionTitle0,.sectionTitle1,.sectionTitle2,.sectionTitle3{fill:#333}.sectionTitle{text-anchor:start;font-size:11px;text-height:14px}.grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}.grid path{stroke-width:0}.today{fill:none;stroke:red;stroke-width:2px}.task{stroke-width:2}.taskText{text-anchor:middle;font-size:11px}.taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}.taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}.taskText0,.taskText1,.taskText2,.taskText3{fill:#fff}.task0,.task1,.task2,.task3{fill:#487e3a;stroke:#13540c}.taskTextOutside0,.taskTextOutside1,.taskTextOutside2,.taskTextOutside3{fill:#000}.active0,.active1,.active2,.active3{fill:#cde498;stroke:#13540c}.activeText0,.activeText1,.activeText2,.activeText3{fill:#000!important}.done0,.done1,.done2,.done3{stroke:grey;fill:#d3d3d3;stroke-width:2}.doneText0,.doneText1,.doneText2,.doneText3{fill:#000!important}.crit0,.crit1,.crit2,.crit3{stroke:#f88;fill:red;stroke-width:2}.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3{stroke:#f88;fill:#cde498;stroke-width:2}.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3,.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3{fill:#000!important}.titleText{text-anchor:middle;font-size:18px;fill:#000}g.classGroup text{fill:#13540c;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}g.classGroup rect{fill:#cde498;stroke:#13540c}g.classGroup line{stroke:#13540c;stroke-width:1}svg .classLabel .box{stroke:none;stroke-width:0;fill:#cde498;opacity:.5}svg .classLabel .label{fill:#13540c;font-size:10px}.relation{stroke:#13540c;stroke-width:1;fill:none}#compositionEnd,#compositionStart,.composition{fill:#13540c;stroke:#13540c;stroke-width:1}#aggregationEnd,#aggregationStart,.aggregation{fill:#cde498;stroke:#13540c;stroke-width:1}#dependencyEnd,#dependencyStart,#extensionEnd,#extensionStart{fill:#13540c;stroke:#13540c;stroke-width:1}.node text{font-size:14px}.node text,div.mermaidTooltip{font-family:trebuchet ms,verdana,arial}div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-size:12px;background:#cdffb2;border:1px solid #6eaa49;border-radius:2px;pointer-events:none;z-index:100} svg { color: rgb(0, 0, 0); font: normal normal 400 normal 16px / normal \"Times New Roman\"; } 管理调用链项目扁平化碎片项目增加微服务 Written with StackEdit.","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"backend","slug":"backend","permalink":"http://blog.garenfeather.cn/tags/backend/"},{"name":"history","slug":"history","permalink":"http://blog.garenfeather.cn/tags/history/"},{"name":"development","slug":"development","permalink":"http://blog.garenfeather.cn/tags/development/"}]},{"title":"简单随意的几种编程语言正则支持比较","slug":"comparison-for-regex-among-several-languages","date":"2015-01-16T09:52:17.000Z","updated":"2018-01-16T14:32:22.649Z","comments":true,"path":"2015/01/16/comparison-for-regex-among-several-languages/","link":"","permalink":"http://blog.garenfeather.cn/2015/01/16/comparison-for-regex-among-several-languages/","excerpt":"那会用各种语言都写过正则匹配，随便乱比较了一下，比较语言包括python、C#和java，没什么逻辑，想到啥看到啥就写的啥，仅供参考 一、版本 java8 C# 版本差异不大吧，不记得了 python 2.7 二、比较 对应函数 python 的re模块中，search和match对应其他两种语言的match函数，确切的来说是search函数对应 python的match函数必须从字符串的第0位开始匹配一次，不存在则返回none（不明白这个函数究竟有什么用，正则表达式有自己的^符号来表示从头开始的匹配啊……）","text":"那会用各种语言都写过正则匹配，随便乱比较了一下，比较语言包括python、C#和java，没什么逻辑，想到啥看到啥就写的啥，仅供参考 一、版本 java8 C# 版本差异不大吧，不记得了 python 2.7 二、比较 对应函数 python 的re模块中，search和match对应其他两种语言的match函数，确切的来说是search函数对应 python的match函数必须从字符串的第0位开始匹配一次，不存在则返回none（不明白这个函数究竟有什么用，正则表达式有自己的^符号来表示从头开始的匹配啊……） findall函数则对应所谓matches的功能，java中并没有什么matches，只能通过Matcher对象的match()方法不断搜索下去达到相对的效果，C#的matches函数会返回一个MatchCollection匹配结果集合对象（java这个正则支持差评） C#的Match对象通过match方法匹配、success属性返回成功与否的结果，匹配位置不会自行移动，要手动设定下一次匹配的offset（辅助参数有index和length来确定匹配位置），java的Matcher对象所用的find方法进行了匹配的同时返回匹配成功与否的结果（一顶C#俩），有start和end方法返回匹配位置，并且会自行随着匹配而移动下一次匹配开始的位置 操作方式（包括compile、match、find等） python中用到的几种都是函数（type()结果为function），java有Pattern对象而C#有Regex对象，java有Matcher对象而C#有Match对象，java一般是用Pattern类的静态方法编译获得该对象，C#则通过以字符串为参数传统新建对象方式获得（new Pattern(str)）。两者的match（Matcher）对象都通过Pattern对象获得，而python则是将Pattern对象作为参数一起放入search（或者findall、match等等）方法中 功能完善 python对正则替换支持的最好，sub函数允许自行构建一个函数来对正则匹配的结果进行复杂的操作（这种操作方式的占了python本身“函数也可以是对象”的构建方式的优势），其他两种目测只能强行命名分组替换，需要更多的自行检测匹配结果 其他 默认情况下python、java和C#的.符号都不支持匹配\\n换行符，java和C#还不支持\\r，C#似乎在一堆字符串里匹配到\\r会出现迷之bug……（应该不是bug，还得多看doc） java里面\\r和\\n都视为line terminator，遇到会终止匹配，而C#和python不视\\r为line terminator，但是C#输出时作为回到行首符覆盖输出，通过输出我们看到的结果会不一样，而实际上其匹配结果跟python是一样的 三、后言 ……写的乱七八糟，将来怕是自己都看不懂 没准为了看得懂回头复习会有新的收获呢","categories":[{"name":"coding","slug":"coding","permalink":"http://blog.garenfeather.cn/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://blog.garenfeather.cn/tags/python/"},{"name":"c#","slug":"c","permalink":"http://blog.garenfeather.cn/tags/c/"},{"name":"java","slug":"java","permalink":"http://blog.garenfeather.cn/tags/java/"}]}]}